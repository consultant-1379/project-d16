export declare class Pagination {
  private dom: {
    paginationGroup: HTMLElement;
  };
  private event: {
    paginationChangePage: CustomEvent;
  };
  private listeners: {
    pagination: ((evt: Event) => void)[];
    inputChange: (evt: Event) => void;
    selectChange: (evt: Event) => void;
  };
  state: {
    currentPage: number;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    numEntries: number;
    numPages: number;
    numPerPage: number;
    pageClicked: string | number;
  };

  constructor(element: HTMLElement);

  init(num: number): void;

  destroy(): void;

  update(num: number): void;

  private _addEventListeners(): void;

  private _removeEventListeners(): void;

  private _updatePaginationDOM(): void;

  private _updateCurrentPage(): void;

  private _setNumPages(nPages: number): void;

  private _injectPaginationControls(): void;

  private _setPaginationControls(): void;

  private _genArrowControl(direction: string, state: boolean): HTMLElement;

  private _genPageControl(label: string, state: boolean): HTMLElement;

  private _setArrowControl(element: HTMLElement, label: string, state: boolean): void;

  private _setPageControl(element: HTMLElement, label: string, state: boolean): void;

  private _isCurrentPage(pageNum: number | string): boolean;

  private _onInputChange(): void;

  private _onSelectChange(): void;

}
