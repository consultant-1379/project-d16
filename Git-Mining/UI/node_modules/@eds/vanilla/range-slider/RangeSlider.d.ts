export declare class RangeSlider {
  private dom: {
    container: HTMLElement;
    handle: NodeListOf<HTMLElement>;
    input: HTMLElement;
    progress: HTMLElement;
    tooltip: NodeListOf<HTMLElement>;
    track: HTMLElement;
  };

  private listeners: {
    down: (evt: Event) => void;
    touchstart: (evt: Event) =>  void;
    move: (evt: Event) => void;
    up: () => void;
    update: () => void;
    change: () => void;
    reset: () => void;
    keyUp: (evt: Event) => void;
    keyDown: (evt: Event) => void;
    scroll: () => void;
    resize: () => void;
  };

  private settings: {
    multiple: boolean;
    min: number;
    max: number;
    step: number;
    classes: Object;
  };

  private touch: boolean;

  constructor(input: HTMLElement);

  init(): void;

  destroy(): void;

  private _addEventListeners(): void;

  private _removeEventListeners(): void;

  private _render(): void;

  private _reset(): void;

  private _setValueFromPosition(evt: Event): void;

  private _change(): void;

  private _touchstart(evt: Event): void;

  private _down(evt: Event): void;

  private _move(evt: Event): void;

  private _up(): void;

  update(): void;

  private _recalculate(): void;

  private _setValue(value: number, index: number): void;

  private _setPosition(): void;

  private _getOffset(): void;

  private _setOffset(target: Array<string>, rigthOffset: number, leftOffset: number): void;

  private _getPosition(value: number): void;

  private _tipsIntersecting(): void;

  private _getHandle(evt: Event): void;

  private _keyActions(evt: Event): void;


  onInit(): void;

  onChange(): void;

  // onEnd(): void;

  private _createElement(type: string, obj: Object): void;

  private _isFunction(func: Function): void;

  private _throttle(fn: Function, limit: number, context: Object): void;
}
