/**
 * @file Module to create Page with tiles.
 * @requires Tile
 */

import { Tile } from './Tile';

/**
 * Class representing a page.
 */
export class Page {

  /**
   * Setup properties.
   */
  constructor() {
    this.dom = {
      page: document,
      tiles: document.querySelectorAll('.tile'),
    };

    this.listeners = {
      maximize: (event) => this._hideNotSelf(event),
      minimize: (event) => this._showAll(event),
    };

    this.tiles = [];
  }

  /**
   * Create component.
   * @public
   */
  init() {
    if (this.dom.tiles) {
      Array.from(this.dom.tiles).forEach(tileDOM => {
        const tile = new Tile(tileDOM);
        tile.init();
        this.tiles.push(tile);
      });
    }
    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    if (this.tiles) {
      this.tiles.forEach(tile => {
        tile.destroy();
      });
    }
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.page.addEventListener('maximizeTile', this.listeners.maximize);
    this.dom.page.addEventListener('minimizeTile', this.listeners.minimize);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.page.removeEventListener('maximizeTile', this.listeners.maximize);
    this.dom.page.removeEventListener('minimizeTile', this.listeners.minimize);
  }

  /**
   * Show all tiles and scroll to minimized tile.
   * @private
   * @param {CustomEvent} event - 'minimizeTile' custom event.
   */
  _showAll(event) {
    this.tiles.forEach(tile => {
      tile.show();
    });

    if (event.detail.id) {
      this._scrollToTile(event.detail.id);
    }
  }

  /**
   * Hide all tiles except maximized.
   * @private
   * @param {CustomEvent} event - 'maximizeTile' custom event.
   */
  _hideNotSelf(event) {
    this.tiles.forEach(tile => {
      if (tile.dom.id !== event.detail.id) {
        tile.hide();
      }
    });
  }

  /**
   * Scroll to the tile selected by ID.
   * @private
   * @param {string} tileId - Tile ID for CSS selector.
   */
  _scrollToTile(tileId) {
    const minimizedTile = this.dom.page.querySelector(`#${tileId}`);
    if (minimizedTile) {
      minimizedTile.scrollIntoView();
    }
  }
}
