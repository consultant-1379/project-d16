export class Breadcrumb {
  constructor(element) {
    this.dom = {
      breadcrumb: element,
      links: [],
      separators: [],
      more: {
        element: null,
        icon: null,
        menu: null,
        items: []
      }
    };
    this.state = {
      breadcrumb: []
    };
    this.listeners = {
      iconClick: () => {
        if (!this.dom.more.menu.classList.contains('visible')) {
          this.dom.more.menu.classList.add('visible');
        } else {
          this.dom.more.menu.classList.remove('visible');
        }
      },
      windowClick: event => {
        const target = event.target ? event.target : event.srcElement;
        if (target !== this.dom.more.icon && !this.dom.more.icon.contains(target)) {
          this.dom.more.menu.classList.remove('visible');
        }
      }
    };
  }

  init(breadcrumb) {
    this.state.breadcrumb = breadcrumb;

    this._buildBreadcrumb();
    this._addEventListeners();
  }

  destroy() {
    this._removeEventListeners();
    this.dom.breadcrumb.innerHTML = '';
  }

  _buildBreadcrumb() {
    const numberOfBreadcrumbs = this.state.breadcrumb.length;

    if (numberOfBreadcrumbs <= 3) {
      this._buildShortBreadcrumb();
    } else {
      this._buildLongBreadcrumb();
    }
  }

  _buildShortBreadcrumb() {
    this.dom.breadcrumb.classList.add('short');
    this.dom.breadcrumb.classList.remove('long');

    const numberOfBreadcrumbs = this.state.breadcrumb.length;

    if (numberOfBreadcrumbs > 1) {
      const moreItems = this.state.breadcrumb.slice(
        0,
        this.state.breadcrumb.length - 1
      );
      const moreElement = this._createMoreElement(moreItems);
      this.dom.breadcrumb.appendChild(moreElement);

      const separatorElement = this._createSeparatorElement();
      this.dom.breadcrumb.appendChild(separatorElement);
    }

    this.state.breadcrumb.forEach((item, index) => {
      if ((numberOfBreadcrumbs - 1) !== index) {
        const linkElement = this._createLinkElement(item, false);
        this.dom.breadcrumb.appendChild(linkElement);
      } else {
        const linkElement = this._createLinkElement(item, true);
        this.dom.breadcrumb.appendChild(linkElement);
      }

      if ((numberOfBreadcrumbs - 1) !== index) {
        const separatorElement = this._createSeparatorElement();
        this.dom.breadcrumb.appendChild(separatorElement);
      }
    });
  }

  _buildLongBreadcrumb() {
    this.dom.breadcrumb.classList.remove('short');
    this.dom.breadcrumb.classList.add('long');

    const numberOfBreadcrumbs = this.state.breadcrumb.length;
    const firstLink = this.state.breadcrumb[0];
    const moreLinks = this.state.breadcrumb.slice(0, numberOfBreadcrumbs - 1);
    const lastLinks = this.state.breadcrumb.slice(numberOfBreadcrumbs - 2, numberOfBreadcrumbs);

    const firstLinkElement = this._createLinkElement(firstLink, false);
    const firstSeparatorElement = this._createSeparatorElement();

    this.dom.breadcrumb.appendChild(firstLinkElement);
    this.dom.breadcrumb.appendChild(firstSeparatorElement);

    const moreElement = this._createMoreElement(moreLinks);
    this.dom.breadcrumb.appendChild(moreElement);

    lastLinks.forEach((item, index) => {
      const separatorElement = this._createSeparatorElement();
      let linkElement;
      if (index === 1) {
        linkElement = this._createLinkElement(item, true);
      } else {
        linkElement = this._createLinkElement(item, false);
      }
      this.dom.breadcrumb.appendChild(separatorElement);
      this.dom.breadcrumb.appendChild(linkElement);
    });
  }

  _createLinkElement(item, isLastItem) {
    const linkElement = document.createElement('span');
    linkElement.classList.add('link');
    linkElement.innerHTML = item.title;
    if (!isLastItem && item.action) {
      linkElement.addEventListener('click', () => {
        item.action();
      });
    }
    this.dom.links.push(linkElement);
    return linkElement;
  }

  _createSeparatorElement() {
    const separatorElement = document.createElement('span');
    separatorElement.classList.add('separator');
    this.dom.separators.push(separatorElement);
    return separatorElement;
  }

  _createMoreElement(items) {
    const moreElement = document.createElement('span');
    const iconElement = document.createElement('i');
    const menuElement = document.createElement('div');

    moreElement.classList.add('more');
    iconElement.classList.add('icon');
    menuElement.classList.add('menu');

    moreElement.appendChild(iconElement);
    moreElement.appendChild(menuElement);

    items.forEach(item => {
      const itemDOM = document.createElement('div');
      itemDOM.classList.add('item');
      itemDOM.innerHTML = item.title;
      if (item.action) {
        itemDOM.addEventListener('click', () => {
          item.action();
        });
      }
      menuElement.appendChild(itemDOM);
    });

    this.dom.more.element = moreElement;
    this.dom.more.icon = iconElement;
    this.dom.more.menu = menuElement;

    return moreElement;
  }

  _addEventListeners() {
    if (this.dom.more.element) {
      window.addEventListener('click', this.listeners.windowClick);
    }
    if (this.dom.more.icon) {
      this.dom.more.icon.addEventListener('click', this.listeners.iconClick);
    }
  }

  _removeEventListeners() {
    if (this.dom.more.element) {
      window.removeEventListener('click', this.listeners.windowClick);
    }
    if (this.dom.more.icon) {
      this.dom.more.icon.removeEventListener('click', this.listeners.iconClick);
    }
  }

}
