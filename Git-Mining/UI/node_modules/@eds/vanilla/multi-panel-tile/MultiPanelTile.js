/**
 * @file Module to create Multi Panel Tile component.
 */

/**
 * Class representing a multi panel tile.
 */
export class MultiPanelTile {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      multiPanelTile: element,
      leftPanel: element.querySelector('.left-panel'),
      midPanel: element.querySelector('.mid-panel'),
      rightPanel: element.querySelector('.right-panel'),
      leftPanelTriggers: element.querySelectorAll('.left-panel-trigger'),
      rightPanelTriggers: element.querySelectorAll('.right-panel-trigger'),
    };
    this.listeners = {
      toggleLeftPanel: () => {
        this._togglePanel(this.dom.leftPanel);
        this._updatePanelBehavior();
      },
      toggleRightPanel: () => {
        this._togglePanel(this.dom.rightPanel);
        this._updatePanelBehavior();
      },
      updatePanelBehavior: () => this._updatePanelBehavior()
    };
    this.flags = {
      panelLeft: false,
      panelRight: false,
    };
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this._addEventListeners();
    this._updatePanelBehavior();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    Array.from(this.dom.leftPanelTriggers).forEach(trigger => {
      trigger.addEventListener('click', this.listeners.toggleLeftPanel);
    });
    Array.from(this.dom.rightPanelTriggers).forEach(trigger => {
      trigger.addEventListener('click', this.listeners.toggleRightPanel);
    });

    window.addEventListener('resize', this.listeners.updatePanelBehavior);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    Array.from(this.dom.leftPanelTriggers).forEach(trigger => {
      trigger.removeEventListener('click', this.listeners.toggleLeftPanel);
    });
    Array.from(this.dom.rightPanelTriggers).forEach(trigger => {
      trigger.removeEventListener('click', this.listeners.toggleRightPanel);
    });

    window.removeEventListener('resize', this.listeners.updatePanelBehavior);
  }

  /**
   * Check if panel is closed.
   * @private
   * @param {HTMLElement} panel - Panel element that shpuld be checked.
   * @return {boolean} - Returns true if panel is closed.
   */
  _isPanelClosed(panel) {
    return panel.classList.contains('hidden');
  }

  /**
   * Toggle panel visibility.
   * @private
   * @param {HTMLElement} panel
   */
  _togglePanel(panel) {
    if (!this._isPanelClosed(panel)) {
      this._hidePanel(panel);
    } else {
      this._showPanel(panel);
    }
  }

  /**
   * Show panel.
   * @private
   * @param {HTMLElement} panel
   */
  _showPanel(panel) {
    if (panel.classList.contains('left-panel')) {
      this.flags.panelLeft = true;
    }
    if (panel.classList.contains('right-panel')) {
      this.flags.panelRight = true;
    }
    panel.classList.remove('hidden');
  }

  /**
   * Hide panel.
   * @private
   * @param {HTMLElement} panel
   */
  _hidePanel(panel) {
    panel.classList.add('hidden');
  }

  /**
   * Set panels' behavior depending on window size and other panels visibility.
   * @private
   */
  _updatePanelBehavior() {
    const leftPanel = this.dom.leftPanel;
    const midPanel = this.dom.midPanel;
    const rightPanel = this.dom.rightPanel;
    const pageWidth = document.body.offsetWidth;

    // mobile, tablet
    if (pageWidth < 769) {
      if (!this._isPanelClosed(leftPanel) && !this._isPanelClosed(rightPanel)) {
        this._hidePanel(leftPanel);
        this._hidePanel(midPanel);
      }

      if (this._isPanelClosed(leftPanel) && this._isPanelClosed(rightPanel)) {
        this._showPanel(midPanel);
      }

      if (!this._isPanelClosed(leftPanel) && this._isPanelClosed(rightPanel)) {
        this._hidePanel(midPanel);
        this._showPanel(leftPanel);
      }

      if (this._isPanelClosed(leftPanel) && !this._isPanelClosed(rightPanel)) {
        this._hidePanel(midPanel);
        this._showPanel(rightPanel);
      }

      // desktop, larger screen
    } else if (pageWidth < 1201) {
      this._showPanel(midPanel);
      if (!this._isPanelClosed(leftPanel) && !this._isPanelClosed(rightPanel)) {

        if (this.flags.panelLeft) {
          this._hidePanel(rightPanel);
        } else {
          this._hidePanel(leftPanel);
        }

        if (this.flags.panelRight) {
          this._hidePanel(leftPanel);
          this._showPanel(rightPanel);
        }
      }
    } else {
      this._showPanel(midPanel);
    }

    this.flags.panelLeft = false;
    this.flags.panelRight = false;
  }
}
