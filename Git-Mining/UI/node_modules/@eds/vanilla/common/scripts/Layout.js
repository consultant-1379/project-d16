/**
 * @file Module to create application layout (system layer and application layer).
 * @requires App
 * @requires Syspanel
 * @requires Sysbar
 */

import { App } from './App';
import { Syspanel } from './Syspanel';
import { Sysbar } from './Sysbar';

const viewport = {
  sm: 480,
  md: 768,
  lg: 1024,
};

/**
 * Class representing a layout.
 */
export class Layout {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      body: element,
      app: element.querySelector('.app'),
      appnav: element.querySelector('.appnav'),
      syspanel: element.querySelector('.syspanel'),
      sysbar: element.querySelector('.sysbar')
    };
    this.app = new App(this.dom.app);
    this.syspanel = new Syspanel(this.dom.syspanel);
    this.sysbar = new Sysbar(this.dom.sysbar);
    this.listeners = {
      resize: () => this._setContentBehavior(),
      navClick: (evt) => this._navClick(evt)
    };
    this.events = {
      showNavigation: new CustomEvent('showNavigation'),
      hideNavigation: new CustomEvent('hideNavigation'),
      toggleNavigation: new CustomEvent('toggleNavigation'),
    };
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this.app.init();
    this.syspanel.init();
    this.sysbar.init();
    this._addEventListeners();
    this._setContentBehavior();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
    this.app.destroy();
    this.syspanel.destroy();
    this.sysbar.destroy();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    window.addEventListener('resize', this.listeners.resize);
    this.dom.appnav.addEventListener('click', this.listeners.navClick);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    window.removeEventListener('resize', this.listeners.resize);
    this.dom.appnav.removeEventListener('click', this.listeners.navClick);
  }

  /**
   * Depending on window width show or hide navigation.
   * @private
   */
  _setContentBehavior() {
    const w = window.outerWidth;

    if (w <= viewport.sm){
      document.dispatchEvent(this.events.hideNavigation);
    } else if (w <= viewport.md){
      document.dispatchEvent(this.events.hideNavigation);
    } else if (w <= viewport.lg) {
      if (!window.localStorage.getItem('navClosed')){
        document.dispatchEvent(this.events.showNavigation);
      }
    } else {
      if (!window.localStorage.getItem('navClosed')){
        document.dispatchEvent(this.events.showNavigation);
      }
    }
  }

  _navClick(evt) {
    if (window.outerWidth <= viewport.sm){
      if (evt.target.tagName === 'A') {
        document.dispatchEvent(this.events.hideNavigation);
      }
    }
  }

}
