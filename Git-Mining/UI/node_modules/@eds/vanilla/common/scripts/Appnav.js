/**
 * @file Module to create Application navigation.
 */

/**
 * Class representing an appnav.
 */
export class Appnav {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      appnav: element,
    };
    this.listeners = {
      toggleNavigation: () => this._toggle(),
      showNavigation: () => this._show(),
      hideNavigation: () => this._hide(),
    };
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    document.addEventListener(
      'toggleNavigation', this.listeners.toggleNavigation);

    document.addEventListener(
      'showNavigation', this.listeners.showNavigation);

    document.addEventListener(
      'hideNavigation', this.listeners.hideNavigation);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    document.removeEventListener(
      'toggleNavigation', this.listeners.toggleNavigation);

    document.removeEventListener(
      'showNavigation', this.listeners.showNavigation);

    document.removeEventListener(
      'hideNavigation', this.listeners.hideNavigation);
  }

  /**
   * Toggle application navigation.
   * @private
   */
  _toggle() {
    if (this.dom.appnav.classList.contains('hidden')) {
      this._show();
      window.localStorage.setItem('navClosed', false);
    } else {
      this._hide();
      window.localStorage.setItem('navClosed', true);
    }
  }

  /**
   * Show application navigation.
   * @private
   */
  _show() {
    window.localStorage.setItem('navClosed', false);
    this.dom.appnav.classList.remove('hidden');
  }

  /**
   * Hide application navigation.
   * @private
   */
  _hide() {
    window.localStorage.setItem('navClosed', true);
    this.dom.appnav.classList.add('hidden');
  }

}
