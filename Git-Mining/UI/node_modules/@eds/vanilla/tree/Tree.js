/**
 * @file Module to create Tree component.
 */

/**
 * Class representing a tree.
 */
export class Tree {

  /**
   * Setup tree properties.
   * @param {HTMLElement} element - The DOM element of the tree.
   */
  constructor(element) {
    this.dom = {
      accordion: element,
      titles: element.querySelectorAll('.title'),
    };
    this.listeners = {
      toggleAccordion: [],
      keyDown: (evt) => {
        if (evt.key === ' ' && evt.target.classList.contains('title')){
          evt.preventDefault();
          this._toggleAccordion(evt.target);
        }
      }
    };
  }

  /**
   * Initialize the tree.
   * @public
   */
  init() {
    this._addEventListeners();
  }

  /**
   * Destroy the tree and associated events.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    Array.from(this.dom.titles).forEach((title, index) => {
      const listener = () => { this._toggleAccordion(title); };
      title.addEventListener('click', listener);
      this.listeners.toggleAccordion[index] = listener;
      title.addEventListener('keydown', this.listeners.keyDown);
    });
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    Array.from(this.dom.titles).forEach((title, index) => {
      title.removeEventListener('click', this.listeners.toggleAccordion[index]);
      title.removeEventListener('keydown', this.listeners.keyDown);
    });
    this.listeners.toggleAccordion = [];
  }

  /**
   * Toggle the tree.
   * @private
   * @param {HTMLElement} title - The DOM element of clicked tree item.
   */
  _toggleAccordion(title) {
    title.classList.toggle('opened');
  }
}
