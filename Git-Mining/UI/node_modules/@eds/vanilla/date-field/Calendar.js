/**
 * @file Module to create Calendar component.
 */

/**
 * Class representing an accordion.
 */
export class Calendar {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      calendar: element,
      year: element.querySelector('.year'),
      month: element.querySelector('.month'),
      days: [],
      prevYear: element.querySelector('.head i:nth-child(4)'),
      prevMonth: element.querySelector('.head i:nth-child(1)'),
      nextMonth: element.querySelector('.head i:nth-child(3)'),
      nextYear: element.querySelector('.head i:nth-child(6)'),
      body: element.querySelector('table.body'),
    };

    this.eng = {
      months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',
        'November', 'December'],
      days: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
    };

    this.listeners = {
      clickPrevYear: () => this._setPrevYear(),
      clickPrevMonth: () => this._setPrevMonth(),
      clickNextMonth: () => this._setNextMonth(),
      clickNextYear:() => this._setNextYear()
    };

    this.calendar = {
      year: '',
      month: '',
      days: [],
    };
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this._createCalendarBody();
    this.setDataCalendar(new Date());
    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.prevYear.addEventListener('click', this.listeners.clickPrevYear, false);
    this.dom.prevMonth.addEventListener('click', this.listeners.clickPrevMonth, false);
    this.dom.nextMonth.addEventListener('click', this.listeners.clickNextMonth, false);
    this.dom.nextYear.addEventListener('click', this.listeners.clickNextYear, false);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.prevYear.removeEventListener('click', this.listeners.clickPrevYear, false);
    this.dom.prevMonth.removeEventListener('click', this.listeners.clickPrevMonth, false);
    this.dom.nextMonth.removeEventListener('click', this.listeners.clickNextMonth, false);
    this.dom.nextYear.removeEventListener('click', this.listeners.clickNextYear, false);
  }

  /**
   * Modify year property and call method to update calendar element.
   * @private
   */
  _setPrevYear() {
    const year = parseInt(this.calendar.year, 10) - 1;
    const monthNum = this.eng.months.indexOf(this.calendar.month);

    this.setDataCalendar(new Date(year, monthNum, '1'));
    this.removeAllSelectedDays();
    this.disableUnselectableDays();
  }

  /**
   * Modify month property and call method to update calendar element.
   * @private
   */
  _setPrevMonth() {
    let year = this.calendar.year;
    let monthNum = this.eng.months.indexOf(this.calendar.month);

    // decrement month
    if (monthNum === 0) {
      monthNum = 11;
      year = parseInt(this.calendar.year, 10) - 1;
    } else {
      monthNum -= 1;
    }

    this.setDataCalendar(new Date(year, monthNum, '1'));
    this.removeAllSelectedDays();
    this.disableUnselectableDays();
  }

  /**
   * Modify month property and call method to update calendar element.
   * @private
   */
  _setNextMonth() {
    let year = this.calendar.year;
    let monthNum = this.eng.months.indexOf(this.calendar.month);

    // increment month
    if (monthNum === 11) {
      monthNum = 0;
      year = parseInt(this.calendar.year, 10) + 1;
    } else {
      monthNum += 1;
    }

    this.setDataCalendar(new Date(year, monthNum, '1'));
    this.removeAllSelectedDays();
    this.disableUnselectableDays();
  }

  /**
   * Modify year property and call method to update calendar element.
   * @private
   */
  _setNextYear() {
    const year = parseInt(this.calendar.year, 10) + 1;
    const monthNum = this.eng.months.indexOf(this.calendar.month);

    this.setDataCalendar(new Date(year, monthNum, '1'));
    this.removeAllSelectedDays();
    this.disableUnselectableDays();
  }

  /**
   * Creates the necessary table elements.
   * @private
   */
  _createCalendarBody() {
    // table head
    const thead = document.createElement('thead');
    const trHead = document.createElement('tr');

    for (let d = 0; d < 7; d += 1) {
      const th = document.createElement('th');
      th.innerHTML = this.eng.days[d];
      trHead.appendChild(th);
    }
    thead.appendChild(trHead);
    this.dom.body.appendChild(thead);

    // table body
    const tbody = document.createElement('tbody');


    const numTD = 7;
    // 7 days / week

    const numTR = 6;
    // 6 weeks / month

    let j = 0;
    for (; j < numTR; j += 1) {
      const tr = document.createElement('tr');
      for (let i = 0; i < numTD; i += 1) {
        const td = document.createElement('td');
        tr.appendChild(td);
      }
      tbody.appendChild(tr);
    }
    this.dom.body.appendChild(tbody);

    // update the constructor value 'days'
    this.dom.days = this.dom.calendar.querySelectorAll('td');
  }

  /**
   * Fills in the DOM content with this.calendar information.
   * @private
   */
  _setDOMCalendar() {
    const today = this.formatJsDate(new Date()).split('-');
    this.dom.month.innerText = this.calendar.month;
    this.dom.year.innerText = this.calendar.year;
    Array.from(this.dom.days).forEach((dayDOM, i) => {
      const dayValue = this.calendar.days[i];
      if (dayValue !== 0) {
        dayDOM.innerText = dayValue;
        dayDOM.classList.remove('dummy');
        if (+today[0] === +this.calendar.year &&
          +today[1] === this.eng.months.indexOf(this.calendar.month) + 1 &&
          +today[2] === this.calendar.days[i]) {
          dayDOM.innerHTML = '<span class="today">' + dayValue + '</span>';
        }
      } else {
        dayDOM.innerText = '';
        dayDOM.classList.add('dummy');
      }
    });
  }

  /**
   * Fills in this.calendar information and calls a method to update DOM element.
   * @public
   * @param {Date} date
   */
  setDataCalendar(date) {
    const dArray = this.formatJsDate(date).split('-');
    const jsDate = new Date(dArray[0], dArray[1] - 1, 1);
    const lastDayMonth = new Date(dArray[0], dArray[1], 0);
    const daysInMonthNum = lastDayMonth.getDate();
    const dayOfWeekNum = jsDate.getDay();
    // const lastDayOfWeekNum = lastDayMonth.getUTCDay();
    this.calendar.year = dArray[0];
    this.calendar.month = this.eng.months[dArray[1] - 1];

    // create 0's at the head
    const headZeroes = Array.apply(null, {
      length: (dayOfWeekNum + 6) % 7,
    }).map(Number.prototype.valueOf, 0);

    // create day numbers != 0
    const numbersInRow = Array.apply(null, {
      length: daysInMonthNum + 1,
    }).map(Number.call, Number);
    numbersInRow.shift();

    // create 0's at the tail
    const numZeroes = 42 - (headZeroes.length + numbersInRow.length);
    const tailZeroes = Array.apply(null, Array(numZeroes)).map(Number.prototype.valueOf, 0);

    // concat all the days and add to calendar
    this.calendar.days = headZeroes.concat(numbersInRow, tailZeroes);

    // Updates the values of the DOM with the current calendar data
    this._setDOMCalendar();
  }

  /**
   * Given a JS Date Object return a string in YYYY-MM-DD format.
   * Previously yyyymmdd()
   * @public
   * @param {Date} jsDate - JS Date Object (created with constructor new Date()).
   * @return {string} - Date in format YYYY-MM-DD.
   */
  formatJsDate(jsDate) {
    const mm = jsDate.getMonth() + 1;
    const dd = jsDate.getDate();
    return [jsDate.getFullYear(),
      (mm > 9 ? '' : '0') + mm,
      (dd > 9 ? '' : '0') + dd,
    ].join('-');
  }

  /**
   * Given an Object return a string in YYYY-MM-DD format.
   * @public
   * @param {Object} date
   * @param {string} date.year
   * @param {string} date.month
   * @param {string} date.day
   * @return {string} - Date in format YYYY-MM-DD.
   */
  formatDate(date) {
    return (
      date.year + '-' +
      this._getMonthNum(date.month) + '-' +
      this._getDayNum(date.day)
    );
  }

  /**
   * Returns month number with leading zero.
   * @private
   * @param {string} month
   * @return {string}
   */
  _getMonthNum(month) {
    const n = this.eng.months.indexOf(month) + 1;
    return n < 10 ? '0' + n : n;
  }

  /**
   * Returns day of month number with leading zero.
   * @private
   * @param {string} day
   * @return {string}
   */
  _getDayNum(day) {
    return day < 10 ? '0' + day : day;
  }

  /**
   * Unselect all days.
   * @public
   */
  removeAllSelectedDays() {
    Array.from(this.dom.days).forEach((day) => {
      day.classList.remove('selected');
    });
  }

  /**
   * Unselect all days.
   * @public
   * @param {String} maxDate - Maximum date in format YYYY-MM-DD
   */
  setMaximumDate(maxDate){
    const max = maxDate.split('-');
    this.max = {
      day: +max[2],
      month: +max[1],
      year: +max[0]
    };
  }

  /**
   * Unselect all days.
   * @public
   * @param {String} minDate - Minimum date in format YYYY-MM-DD
   */
  setMinimumDate(minDate){
    const min = minDate.split('-');
    this.min = {
      day: +min[2],
      month: +min[1],
      year: +min[0]
    };
  }

  _disableMaximumUnselectableDays(){
    if (!this.max) {
      return;
    }

    Array.from(this.dom.days).forEach(day => {
      if((+this.calendar.year > this.max.year ) ||
        (+this.calendar.year === this.max.year  && +this._getMonthNum(this.calendar.month) > this.max.month) ||
        (+this.calendar.year === this.max.year  && +this._getMonthNum(this.calendar.month) === this.max.month
          && +day.innerText > this.max.day)){
        day.classList.add('disabled');
      }
    });
  }

  _disableMinimumUnselectableDays(){
    if (!this.min) {
      return;
    }

    Array.from(this.dom.days).forEach(day => {
      if((+this.calendar.year < this.min.year ) ||
        (+this.calendar.year === this.min.year  && +this._getMonthNum(this.calendar.month) < this.min.month) ||
        (+this.calendar.year === this.min.year  && +this._getMonthNum(this.calendar.month) === this.min.month
          && +day.innerText < this.min.day)){
        day.classList.add('disabled');
      }
    });
  }

  _clearRestrictionDates(){
    Array.from(this.dom.days).forEach(day => {
      day.classList.remove('disabled');
    });
  }

  disableUnselectableDays(){
    if (this.dom.days) {
      this._clearRestrictionDates();
      this._disableMaximumUnselectableDays();
      this._disableMinimumUnselectableDays();
    }
  }

}
