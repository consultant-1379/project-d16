/**
 * @file Module to create Datepicker component.
 * @requires Calendar
 */

import { Calendar } from './Calendar';

/**
 * Class representing an datepicker.
 */
export class Datepicker {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      datepicker: element,
      calendar: element.querySelector('.calendar'),
      button: element.querySelector('.btn, .suffix'),
      input: element.querySelector('input[type="text"]'),
      days: null,
      hiddenInput: element.querySelector('input[type="hidden"]'),
    };
    this.listeners = {
      clickOutside: (evt) => this._hideIfClickedOutside(evt),
      clickDay: (evt) => this._selectDay(evt),
      clickButton: () => this._toggleCalendar(),
      clickInput: () => this._showCalendar(),
      onFocus: () => this._showCalendar(),
      changeInput: () => this._onInputChange(),
      keyupInput: (evt) => this._onInputKeyup(evt),
    };

    this.calendar = null;
    this.selectedDate = null;
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this.calendar = new Calendar(this.dom.calendar);
    this.calendar.init();
    this.dom.days = this.dom.calendar.querySelectorAll('td');

    // set minimum date limit
    if (this.dom.input.min) {
      this.setMinimumDate(this.dom.input.min);
    }

    // set maximum date limit
    if (this.dom.input.max) {
      this.setMaximumDate(this.dom.input.max);
    }

    // in case of predefined date, validate it
    if (this.dom.input.value && this._isValidDate(this.dom.input.value) && this._isInRange(this.dom.input.value)) {
      this._setSelectedDate();
    } else {
      this.dom.input.value = '';
    }

    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.button.addEventListener('click', this.listeners.clickButton, false);
    Array.from(this.dom.days).forEach(day => {
      day.addEventListener('click', this.listeners.clickDay, false);
    });
    this.dom.input.addEventListener('click', this.listeners.clickInput, false);

    this.dom.input.addEventListener('change', this.listeners.changeInput);
    this.dom.input.addEventListener('keyup', this.listeners.keyupInput);

    this.dom.input.addEventListener('focus', this.listeners.onFocus, false);
    document.addEventListener('click', this.listeners.clickOutside, false);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.button.removeEventListener('click', this.listeners.clickButton, false);
    Array.from(this.dom.days).forEach(day => {
      day.removeEventListener('click', this.listeners.clickDay, false);
    });

    this.dom.input.removeEventListener('change', this.listeners.changeInput);
    this.dom.input.removeEventListener('keyup', this.listeners.keyupInput);

    document.removeEventListener('click', this.listeners.clickOutside, false);
  }

  /**
   * Check if date is valid.
   * @private
   * @param {string} dateString
   * @return {boolean} - True if date is valid.
   */
  _isValidDate(dateString) {
    const regEx = /^\d{4}-\d{2}-\d{2}$/;
    // Invalid format
    if (!dateString.match(regEx)) {
      return false;
    }
    const d = new Date(dateString);
    // Invalid date (or this could be epoch), https://stackoverflow.com/a/1353711/4634380
    if (isNaN(d.getTime())) {
      return false;
    }
    return d.toISOString().slice(0, 10) === dateString;
  }

  /**
   * Check if date is in min - max limit.
   * @private
   * @param {string} dateString
   * @return {boolean} - True if date is within range.
   */
  _isInRange(dateString) {
    let result = true;

    if (this.calendar.min && (new Date(dateString) < new Date(this.dom.input.min))) {
      result = false;
    }

    if (this.calendar.max && (new Date(dateString) > new Date(this.dom.input.max))) {
      result = false;
    }

    return result;
  }

  /**
   * Check input date
   * if valid date, update calendar and highlight with CSS;
   * if invalid date, correct date format.
   * @private
   */
  _handleDateChange() {
    const typedInput = this.dom.input.value;
    if (typedInput.length === 10) {
      if (this._isValidDate(typedInput)) {
        this.calendar.setDataCalendar(new Date(typedInput));
        const dateArray = typedInput.split('-');
        this.selectedDate = {
          year: dateArray[0],
          month: dateArray[1],
          day: dateArray[2],
        };
        this._setSelectedDateCSS();
      } else {
        this._correctDateFormat();
      }
    }
  }

  /**
   * Handle input change event (works on blur)
   * if valid date, update calendar and highlight with CSS;
   * if invalid date, correct date format.
   * @private
   */
  _onInputChange() {
    const inputValue = this.dom.input.value;

    // If clear input, remove selected date and styles
    if (!inputValue) {
      this._clearSelectedDate();
      return;
    }

    // If date in input is valid and in the range, set new selected date and styles
    if (this._isValidDate(this.dom.input.value) && this._isInRange(this.dom.input.value)) {
      this._setSelectedDate();
    } else {
      // Otherwise, change to existing selected date
      this.dom.input.value = this.selectedDate ?
        `${this.selectedDate.year}-${this.selectedDate.month}-${this.selectedDate.day}` : '';
    }
  }

  /**
   * Handle keyup event
   * @private
   */
  _onInputKeyup(evt) {
    if (evt.key === 'Escape'){
      this._hideCalendar();
    } else if (this.dom.input.value.length === 10) {

      /*
       * Entered 10 characters -> validate input,
       * if correct change it, otherwise do nothing
       * because it will be set to proper state on blur (onInputChange will work)
       */
      if (this._isValidDate(this.dom.input.value) && this._isInRange(this.dom.input.value)) {
        this._setSelectedDate();
      }
    } else if (this.dom.input.value.length === 0) {

      /*
       * To reproduce this case
       * 1. open empty input
       * 2. type in valid date (becomes selected)
       * 3. remove date by hitting backspace button
       * This is not caught by change event because value doesnt change (empty -> empty),
       * but we need to reset selected date on step 2.
       */
      this._clearSelectedDate();
    }
  }

  /**
   * Set selected date
   * @private
   */
  _setSelectedDate() {
    this.calendar.setDataCalendar(new Date(this.dom.input.value));
    const dateArray = this.dom.input.value.split('-');
    this.selectedDate = {
      year: dateArray[0],
      month: dateArray[1],
      day: dateArray[2],
    };
    this._setSelectedDateCSS();
  }

  /**
   * Clear selected date
   * @private
   */
  _clearSelectedDate() {
    this.selectedDate = null;
    this.calendar.removeAllSelectedDays();
  }

  /**
   * Set date to today when detecting an invalid date format.
   * @private
   */
  _correctDateFormat() {
    const today = new Date();
    const todayYYYYMMDD = this.calendar.formatJsDate(today).split('-');
    this.dom.input.value = todayYYYYMMDD.join('-');
    this.selectedDate = {
      year: todayYYYYMMDD[0],
      month: todayYYYYMMDD[1],
      day: todayYYYYMMDD[2],
    };
    this.calendar.setDataCalendar(new Date(today));
    this.calendar.removeAllSelectedDays();
    this._setSelectedDateCSS();
  }

  /**
   * Highlight selected date with CSS.
   * @private
   */
  _setSelectedDateCSS() {
    this.calendar.removeAllSelectedDays();

    // convert to number to remove leading zero if exists
    let selectedDay = this.selectedDate ?
      +this.selectedDate.day :
      (new Date(this.dom.input.value)).getDate();

    // convert to string for equality check
    selectedDay = selectedDay.toString();

    Array.from(this.dom.days).some(day => {
      if (day.innerText === selectedDay) {
        day.classList.add('selected');
        return true;
      }
    });
  }

  /**
   * Select clicked day in calendar.
   * @private
   * @param {Event} evt - Click event
   */
  _selectDay(evt) {
    if (!evt.target.classList.contains('dummy')) {
      this.calendar.removeAllSelectedDays();
      this.selectedDate = {
        year: this.calendar.calendar.year,
        month: this.calendar.calendar.month,
        day: evt.target.innerText,
      };
      const formattedDate = this.calendar.formatDate(this.selectedDate);
      this.dom.input.value = this.dom.hiddenInput.value = formattedDate;
      if (evt.target.tagName === 'TD') {
        evt.target.classList.add('selected');
      } else {
        evt.target.parentNode.classList.add('selected');
      }
      this.dom.input.dispatchEvent(new Event('change'));
      this._hideCalendar();
    }
  }

  /**
   * Hide calendar.
   * @private
   */
  _hideCalendar() {
    this.dom.calendar.classList.add('closed');
  }

  /**
   * Show calendar.
   * @private
   */
  _showCalendar() {
    this.calendar.disableUnselectableDays();
    this.dom.calendar.classList.remove('closed');
  }

  /**
   * Toggle calendar visibility and validate selected date.
   * @private
   */
  _toggleCalendar() {
    if (this.dom.calendar.classList.contains('closed')) {
      this._showCalendar();
    } else {
      this._hideCalendar();
    }

    const inputValue = this.dom.input.value;
    // not empty input
    if (inputValue) {
      if (this._isValidDate(inputValue) && this._isInRange(inputValue)) {
        this.calendar.setDataCalendar(new Date(inputValue));
        this._setSelectedDateCSS();
      }
    }
  }

  /**
   * Hide calendar when click outside datepicker.
   * @private
   * @param {Event} evt - Click event.
   * @param {HTMLElement} evt.target - Clicked element.
   */
  _hideIfClickedOutside({target}) {
    if (!this.dom.datepicker.contains(target)) {
      this._hideCalendar();
    }
  }

  setMaximumDate(maxDate){
    this.calendar.setMaximumDate(maxDate);
  }

  setMinimumDate(minDate){
    this.calendar.setMinimumDate(minDate);
  }


}
