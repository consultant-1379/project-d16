interface ArcOptions {
  radius: {
    inner: number;
    outer: number;
  };
  angle: {
    start: number;
    end: number;
  };
  scale: number;
}

interface ArcElemOptions {
  arc: ArcOptions;
  props: {
    class: string;
  };
}

interface LabelOptions {
  message: string;
  class: string;
  x: number;
  y: number;
  fontSize: number;
  scale: number;
}

interface Limit {
  from: number;
  to: number;
  color: string;
  label: string;
}

interface GaugeSettings {
  value: number;
  min: number;
  max: number;
  units: string;
  scale: number;
  size?: string;
  decimals?: number;
  limits?: Limit[];
}

export declare class Gauge {
  private dom: {
    gauge: HTMLElement;
    id: string;
    settings: string;
    valueArc: SVGPathElement;
    valueLabel: SVGGElement;
  };

  data: GaugeSettings;

  constructor(element: HTMLElement);

  init(): void;

  destroy(): void;

  private _setCanvas(element: HTMLElement, scale: number): Object;

  private _injectTexture(): void;

  private _getScale(size?: 'small' | 'medium' | 'large'): number;

  private _createArc(options: ArcOptions): Function;

  private _drawArc(canvas: Object, options: ArcElemOptions): Object;

  private _drawLabel(canvas: Object, options: LabelOptions): Object;

  private _parseData(): Object;

  private _setDataDefaults(): void;

  private setRandomData(): void;

  private _valueToAngle(value: number): number;

  private _angleToValue(angle: number, parentThis: Gauge): number;

  private _setLabelAngle(angle: number, parentThis: Gauge): void;

  private _arcTween(newAngle: number, oldAngle: number, _parentThis: Gauge): Function;

  private _setArcColor(value: number | string, limits: Limit[], _parentThis: Gauge): void;

  private _drawChart(): void;

  setValue(value: number|string): void;
}
