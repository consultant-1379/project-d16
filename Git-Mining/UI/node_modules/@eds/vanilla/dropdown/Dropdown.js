/**
 * @file Module to create Dropdown component.
 * @requires Menu
 */

import { Menu } from './Menu';

/**
 * Class representing a dropdown.
 */
export class Dropdown {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      dropdown: element,
      button: element.querySelector('.btn, .clickable'),
      extraButton: element.querySelector('.extra'),
      menu: element.querySelector('.menu'),
      items: element.querySelectorAll('.item')
    };

    this.listeners = {
      dropdownKeydown: (evt) => {
        if (evt.key === 'ArrowUp' || evt.key === 'ArrowDown' || evt.key === 'Enter' || evt.key === ' ') {
          evt.preventDefault();
        }

        if (evt.key === ' '){
          if (this.dom.dropdown.classList.contains('open') && this.dom.menu.querySelector('.highlight')) {
            evt.preventDefault();
          }
        }
        this._arrowKeyActions(evt);
      },
      toggleMenu: () => this.menu.toggle(),
      hideMenu: () => {
        this.menu.hide();
        this._removeOptionsHighlight();
      },
      clickOutside: (evt) => this._hideIfClickedOutside(evt)
    };

    this.highlightIndex = -1;
    this.type = element.getAttribute('data-type') || 'click';
    this.isDisabled = this.dom.dropdown.getAttribute('disabled') !== null;
  }

  /**
   * Create component.
   * @public
   */
  init() {
    if (this.dom.menu) {
      this.menu = new Menu(this.dom.menu);
      this.menu.init();
    }

    if (this.isDisabled) {
      this._setDisabled();
    }
    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    switch (this.type) {
      case 'click':
        this.dom.button.addEventListener('click', this.listeners.toggleMenu);
        this.dom.menu.addEventListener('click', this.listeners.hideMenu);
        this.dom.dropdown.addEventListener('keydown', this.listeners.dropdownKeydown);
        break;

      case 'divided':
        this.dom.extraButton.addEventListener('click', this.listeners.toggleMenu);
        this.dom.menu.addEventListener('click', this.listeners.hideMenu);
        this.dom.button.addEventListener('click', this.listeners.hideMenu);
        this.dom.extraButton.addEventListener('keydown', this.listeners.dropdownKeydown);
        break;
    }

    document.addEventListener('click', this.listeners.clickOutside);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    switch (this.type) {
      case 'click':
        this.dom.button.removeEventListener('click', this.listeners.toggleMenu);
        this.dom.menu.removeEventListener('click', this.listeners.hideMenu);
        this.dom.dropdown.removeEventListener('keydown', this.listeners.dropdownKeydown);
        break;

      case 'divided':
        this.dom.extraButton.removeEventListener('click', this.listeners.toggleMenu);
        this.dom.menu.removeEventListener('click', this.listeners.hideMenu);
        this.dom.button.removeEventListener('click', this.listeners.hideMenu);
        this.dom.extraButton.removeEventListener('keydown', this.listeners.dropdownKeydown);
        break;
    }

    document.removeEventListener('click', this.listeners.clickOutside);
  }

  /**
   * Disable dropdown.
   * @private
   */
  _setDisabled() {
    if (this.dom.button) {
      this.dom.button.setAttribute('disabled', 'disabled');
    }

    if (this.dom.extraButton) {
      this.dom.extraButton.setAttribute('disabled', 'disabled');
    }
  }

  /**
   * Hide menu when click outside dropdown.
   * @private
   * @param {Event} evt - Click event.
   * @param {HTMLElement} evt.target - Clicked element.
   */
  _hideIfClickedOutside({target}){
    if (!this.dom.dropdown.contains(target)){
      this.menu.hide();
    }
  }


  /**
   * Keyboard accessibility.
   * @private
   * @param {Event} evt - press key.
   */
  _arrowKeyActions(evt) {

    const options = this.dom.items.length - 1;

    switch (evt.key) {
      case 'Escape':
        this.menu.hide();
        this._removeOptionsHighlight();
        break;

      case 'ArrowDown':
        if (this.highlightIndex >= options) {
          this.highlightIndex = 0;
        } else {
          this.highlightIndex += 1;
        }
        break;

      case 'ArrowUp':
        if (this.highlightIndex <= 0) {
          this.highlightIndex = options;
        } else {
          this.highlightIndex -= 1;
        }
        break;

      case 'Enter':
        if (this.dom.dropdown.classList.contains('open') && this.dom.menu.querySelector('.highlight')) {
          this.dom.menu.querySelector('.highlight').click();
        } else if (!this.dom.button.classList.contains('disabled')){
          this.menu.toggle();
        }
        this._removeOptionsHighlight();
        break;

      case ' ':
        if (this.dom.dropdown.classList.contains('open') && this.dom.menu.querySelector('.highlight')) {
          this.dom.menu.querySelector('.highlight').click();
        } else if (!this.dom.button.classList.contains('disabled')){
          this.menu.toggle();
        }
        this._removeOptionsHighlight();
        break;
    }

    this._highlightOptions();
  }


  /**
   * Highlight option when using keyboard.
   * @private
   */
  _highlightOptions() {
    const options = this.dom.items;

    for (let i = 0; i < options.length; i += 1) {
      options[i].classList.remove('highlight');

      if (i === this.highlightIndex) {
        options[i].classList.add('highlight');
      }
    }
  }

  /**
   * Remove option's highlight.
   * @private
   */
  _removeOptionsHighlight() {
    this.highlightIndex = -1;

    const options = this.dom.items.length;

    for (let i = 0; i < options; i += 1) {
      this.dom.items[i].classList.remove('highlight');
    }

    // reset option list's scroll position
    this.dom.menu.scrollTop = 0;
  }
}
