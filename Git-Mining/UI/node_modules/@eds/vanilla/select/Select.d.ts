export declare class Select {
  private dom: {
    select: HTMLElement;
    selectOptions: HTMLElement;
    current: HTMLElement;
    items: NodeListOf<HTMLElement>;
    checkboxes: NodeListOf<HTMLElement>;
    input: HTMLElement;
  };

  private events: {
    singleOption: CustomEvent
  };

  private listeners: {
    selectKeydown: (evt: Event) => void;
    singleCurrentClick: () => void;
    singleSelectOptionsClick: (evt: Event) => void;
    singleSelectKeyup: (evt: Event) => void;
    multiCurrentClick: () => void;
    multiSelectOptionsChange: (evt: Event) => void;
    multiSelectKeyup: (evt: Event) => void;
    multiPillsCurrentClick: () => void;
    multiPillsSelectOptionsChange: (evt: Event) => void;
    multiPillsSelectQuerySelectorClick: (evt: Event) => void;
    multiPillsSelectKeyup: (evt: Event) => void;
    inputSingleSelectOptionsClick: (evt: Event) => void;
    inputSingleInputClick: () => void;
    inputSingleInputKeyup: () => void;
    inputSingleSelectKeyup: (evt: Event) => void;
    inputMultiInputClick: () => void;
    inputMultiSelectOptionsChange: (evt: Event) => void;
    inputMultiInputKeyup: (evt: Event) => void;
    inputMultiSelectQuerySelectorClick: (evt: Event) => void;
    inputMultiSelectKeyup: (evt: Event) => void;
    scroll: () => void;
    clickedOutside: (evt: Event) => void;
  };

  private type: 'single' | 'multi' | 'multi-pills' | 'input-single'  | 'input-multi';

  private highlightIndex: number;

  private selectedOptions: Array<string>;

  private filteredOptions: Array<string>;

  constructor(element: HTMLElement);

  init(): void;

  destroy(): void;

  private _render(): void;

  private _addEventListeners(): void;

  private _removeEventListeners(): void;

  private _disableState(): void;

  private _createCheckboxes(): void;

  private _isEllipsisActive(evt: Event): void;

  private _addPill(): void;

  private _removePill(evt: Event): void;

  private _selectOption(evt: Event): void;

  private _highlightSingleActiveOption(evt: Event): void;

  private _setInputValue(target: HTMLElement): void;

  private _filterOptions(): void;

  private _multiSelect(evt: Event, target: HTMLElement): void;

  private _refreshMultiPlaceholder(): void;

  private _arrowKeyActions(evt: KeyboardEvent): void;

  private _highlightOptions(): void;

  private _removeOptionsHighlight(): void;

  private _isInViewport(element: HTMLElement): void;

  private _toggleSelectOpt(): void;

  private _optionsListPosition(select: HTMLElement): void;

  private _hideSelectOpt(): void;
}
