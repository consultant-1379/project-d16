import * as d3 from 'd3';

export class ColorScale {

  /**
   * Setup color scale properties
   * @param {Object} props - The properties to initialize the color scale
   * @param {Array} props.colors - The array of colors
   */
  constructor(props) {
    props = {
      ...props
    };
    this.length = props.length || 15;
    this.colors = props.colors || this._generateColorMatrix(this.length);
  }

  /**
   * Initialize the color scale
   */
  init() {
    this.colorScale = d3
      .scaleOrdinal()
      .range(this.colors);
  }

  /**
   * Get the color scale
   * @returns {Function}
   */
  get() {
    return this.colorScale;
  }

  /**
   * Set the color scale
   * @param {Function} scale - d3 function for color scale
   */
  set(scale) {
    this.colorScale = scale;
  }

  /**
   * Get the colors array
   * @returns {Array}
   */
  getColors() {
    return this.colors;
  }

  /**
   * Set the colors
   * @param {Array} colors - Array of colors
   */
  setColors(colors) {
    this.colors = colors;
  }

  /**
   * Generate color matrix
   * @param {number} n – Number of colors to return
   */
  _generateColorMatrix(n) {
    const array = [];
    for (let i = 0; i < n; i+=1) {
      array.push(`color-data-${(i%20)+1}`);
    }
    return array;
  }

  /**
   * Generates a palette class from the specified string.
   * @param {string} palette – Identifier to convert to a palette class
   */
  static getRangePaletteClass(palette) {
    if (!palette) return 'sequential-4';
    let paletteClass = palette.toLowerCase().split(' ').join('-');

    const paletteMap = {
      'sequential-1': true,
      'sequential-2': true,
      'sequential-3': true,
      'sequential-4': true,
      'sequential-5': true,
      'sequential-6': true,
      'sequential-7': true,
      'sequential-8': true,
      'sequential-9': true,
      'sequential-10': true,
      'diverging-1': true,
      'diverging-2': true,
      'diverging-3': true,
      'diverging-4': true,
      'diverging-5': true,
      'diverging-6': true,
    };

    if (paletteMap[paletteClass] !== true) {
      paletteClass = 'sequential-1';
    }

    return paletteClass;
  }
}
