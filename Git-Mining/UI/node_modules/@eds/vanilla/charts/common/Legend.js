import * as d3 from 'd3';
import { Pill } from '../../pill/Pill';
import { ColorScale } from './ColorScale';

export class Legend {

  /**
   * Common legend component for charts
   * @param {Object} props - The properties to initialize the legend
   * @param {HTMLElement} props.element - The DOM element to append the legend
   * @param {Object} props.data - The data necessary to populate the legend
   * @param {Function} props.draw - The chart draw function to update
   * @param {Object} [props.margin] - The top, right, bottom and left margins of the chart
   * @param {number} [props.margin.top] - The top margin
   * @param {number} [props.margin.right] - The right margin
   * @param {number} [props.margin.bottom] - The bottom margin
   * @param {number} [props.margin.left] - The left margin
   */
  constructor(props) {
    this.element = props.element;
    this.data = props.data;
    this.draw = props.draw;
    this.highlight = props.highlight || (() => {});
    this.margin = props.margin;
    this.columns = this.data.length > 0 ? Object.keys(this.data[0]) : this.data;

    this.colorScale = new ColorScale({
      length: this.data.series.length
    });
    this.colorScale.init();
    this.pills = [];
  }

  /**
   * Initialize the legend
   */
  init() {
    const initPills = selection => {
      selection.nodes().forEach(node => {
        const p = new Pill(node, () => {
          let dataCopy = JSON.parse(JSON.stringify(this.data));
          let allPillsUnselected = true;
          this.pills.forEach(pill => {
            if (!pill.instance.isSelected()) {
              dataCopy.series = dataCopy.series.filter(serie => serie.name !== pill.key);
            } else {
              allPillsUnselected = false;
            }
          });
          if (allPillsUnselected) dataCopy = { common: [], series: [] };
          this.draw(dataCopy);
          this.highlight();
        });
        p.init();
        this.pills.push({
          instance: p,
          key: d3.select(node).data()[0]
        });
      });
    };

    this.legend = d3.select(this.element).select('.chart-legend').empty() ?
      d3.select(this.element)
        .append('div')
        .classed('chart-legend', true)
        // .style('margin-left', this.margin.left + 'px')
        .lower() :
      d3.select(this.element).select('.chart-legend');

    const pill = this.legend
      .selectAll('.pill')
      .data(this.data.series.map(d => d.name))
      .enter()
      .append('span')
      .classed('pill', true)
      .classed('toggle', true)
      .call(initPills)
      .on('mouseenter', (d) => {
        const activePill = this.pills.filter(p => p.key === d)[0];
        if (activePill.instance.isSelected()) {
          this.highlight(d);
        } else {
          this.highlight();
        }
      })
      .on('mouseleave', () => {
        this.highlight();
      });

    pill
      .append('i')
      .attr('class', d => 'icon icon-alarm-level6 ' + this.colorScale.get()(d));

    pill
      .append('span')
      .text(d => d);
  }

  /**
   * Filter the data according to the pills.
   */
  filter(data) {
    const ret = {};
    const dataCopy = JSON.parse(JSON.stringify(data));

    ret.series = dataCopy.series.filter(serie => {
      let active = false;
      this.pills.forEach(pill => {
        if (pill.key === serie.name && pill.instance.isSelected()) {
          active = true;
        }
      });
      return active;
    });
    if (ret.series.length === 0) {
      ret.common = [];
    } else {
      ret.common = dataCopy.common;
    }
    return ret;
  }
}
