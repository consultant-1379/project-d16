import * as d3 from 'd3';

export class Stage {

  /**
   * Common stage component for charts
   * @param {Object} props - The properties to initialize the stage
   * @param {HTMLElement} props.element - The DOM element to append the stage
   * @param {number} props.height - The height of the stage
   * @param {Object} props.margin - The top, right, bottom and left margins
   * @param {number} props.margin.top - The top margin
   * @param {number} props.margin.right - The right margin
   * @param {number} props.margin.bottom - The bottom margin
   * @param {number} props.margin.left - The left margin
   */
  constructor(props) {
    this.element = props.element;
    this.margin = props.margin;
    this.height = props.height;
    this.width = props.width || this.getCanvasWidth();
    this.listeners = [];
  }

  /**
   * Creates the SVG and Canvas elements
   */
  init() {
    if (!this.element.querySelector('svg')) {
      d3.select(this.element)
        .append('svg')
        .attr('width', this.width + this.margin.left + this.margin.right)
        .attr('height', this.height + this.margin.top + this.margin.bottom)
        .classed('chart', true)
        .append('g')
        .attr('transform', `translate(${this.margin.left}, ${this.margin.top})`)
        .classed('canvas', true);
    }
  }

  /**
   * Get the canvas DOM element
   * @return {HTMLElement} The canvas element
   */
  getCanvas() {
    return d3.select(this.element).selectAll('.canvas');
  }

  /**
   * Get the width of the stage without margins
   * @return {number} The width value
   */
  getCanvasWidth() {
    return this.element.offsetWidth - this.margin.right - this.margin.left;
  }

  /**
   * Get the width of the canvas
   * @return {number} The width value
   */
  getWidth() {
    return this.element.offsetWidth;
  }

  /**
   * Set the window resize event to redraw the chart
   * @param {requestCallback} callback - The callback that gets triggered on window resize
   */
  onResize(callback) {
    const delay = () => {
      setTimeout(() => {
        d3.select(this.element)
          .select('svg')
          .attr('width', this.getWidth());
        callback();
      }, 300);
    };
    // TODO: Add event of menu opening/closing, not updating chart atm
    window.addEventListener('resize', delay);
    document.addEventListener('toggleNavigation', delay);
    this.listeners.push(delay);
  }

  destroy() {
    this.listeners.forEach(listener => {
      window.removeEventListener('resize', listener);
      document.removeEventListener('toggleNavigation', listener);
    });
    this.listeners = [];
  }

}
