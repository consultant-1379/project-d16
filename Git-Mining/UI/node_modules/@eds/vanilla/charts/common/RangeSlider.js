import * as d3 from 'd3';

export class RangeSlider {

  constructor(props) {
    this.element = props.element;

    this.options = {
      unit: '',
      ...props.options
    };
    this.margin = {
      left: 0,
      right: 0,
      ...props.margin,
    };

    this.width = this.element.clientWidth
      - this.margin.left
      - this.margin.right;

    this.min = 0;
    this.max = 0;
    this.scale = () => '';

    this.maxWidth = 300;
    this.minCellWidth = 42;
  }

  init() {

    // Setup containers.

    this.slider = d3.select(this.element)
      .append('div')
      .classed('chart-range-slider', true)
      .style('padding-left', `${this.margin.left}px`)
      .style('padding-right', `${this.margin.right}px`);

    this.sliderAlign = this.slider
      .append('div')
      .classed('chart-range-slider-align', true);

    this.sliderUnit = this.sliderAlign
      .append('div')
      .classed('chart-range-slider-unit', true)
      .style('width', `${this.margin.left - 30}px`)
      .text(this.options.unit);
  }

  update(scale, min, max) {
    this.min = min || this.min;
    this.max = max || this.max;
    this.scale = scale || this.scale;

    this.width = this.element.clientWidth
      - this.margin.left
      - this.margin.right;

    const sliderWidth = Math.min(this.maxWidth, this.width);
    const cellCountSuggestion = Math.floor(sliderWidth / this.minCellWidth);

    scale.nice(cellCountSuggestion);
    const texts = scale.ticks(cellCountSuggestion);
    const cellCount = texts.length - 1;

    const values = [];
    for (let i = 0; i < (texts.length - 1); i += 1) {
      values.push(
        this.min + (this.max - this.min) * i / (cellCount - 1));
    }

    this.sliderAlign
      .style('width', `${sliderWidth}px`);

    const cellUpdate = this.sliderAlign
      .selectAll('div.chart-range-slider-cell')
      .data(values);
    const cellEnter = cellUpdate
      .enter()
      .append('div')
      .classed('chart-range-slider-cell', true);
    cellUpdate.exit().remove();

    cellUpdate.merge(cellEnter)
      .style('background-color', d => this.scale(d))
      .style('width', `${sliderWidth / cellCount - 1}px`)
      .style('left', (_, i) => `${i * (sliderWidth / cellCount) + 1}px`);

    const textUpdate = this.sliderAlign
      .selectAll('span.chart-range-slider-text')
      .data(texts);
    const textEnter = textUpdate
      .enter()
      .append('span')
      .classed('chart-range-slider-text', true);
    textUpdate.exit().remove();

    textUpdate.merge(textEnter)
      .style('left', (_, i) => `${i * (sliderWidth / cellCount)}px`)
      .text(d => d3.format('.2s')(d));
  }
}
