/**
 * @file Module to create Sign In page.
 */

/**
 * Class representing a sign in.
 */
export class SignIn {

  /**
   * Setup SignIn properties.
   * @param {HTMLElement} element - The DOM element of the page.
   * @param {URL} loggedInUrl - page URL.
   */
  constructor(element, loggedInUrl = '/') {
    this.dom = {
      signin: element,
      reveal: element.querySelector('.reveal'),
      inputUsername: element.querySelector('#username'),
      inputPassword: element.querySelector('#password'),
      form: element.querySelector('form'),
      error: element.querySelector('.error'),
      welcome: element.querySelector('.welcome'),
      loggedInUrl,
    };

    this.listeners = {
      click: () => this._revealPassword(),
      blur: (evt) => this._validateFieldOnBlur(evt),
      submit: (evt) => this._validateFormOnSubmit(evt),
      focus: (evt) => this._labelAnimation(evt),
      inputsBlur: (evt) => this._checkEmptyField(evt)
    };

    this.messages = {
      valueMissing: 'Please fill out this field.',
      typeMismatch: {
        email: 'Please use a valid email.',
        fallback: 'Please use the correct input type.'
      },
      patternMismatch: {
        signum: 'Please use a valid signum.',
        fallback: 'Please match the requested format.'
      },
      fallback: 'Please enter a correct value for this field.'
    };

    this.props = {
      validFields: []
    };
  }

  /**
   * Initialize SignIn page.
   * @public
   */
  init() {
    this._removeNativeValidation();
    this._addEventListeners();
    // this.showGenericError();
  }

  /**
   * Destroy SignIn page and associated events.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.reveal.addEventListener('click', this.listeners.click);
    this.dom.signin.addEventListener('blur', this.listeners.blur);
    this.dom.signin.addEventListener('submit', this.listeners.submit);

    const inputs = [this.dom.inputUsername, this.dom.inputPassword];

    inputs.forEach((input) => {
      input.addEventListener('focus', this.listeners.focus);
    });

    inputs.forEach((input) => {
      input.addEventListener('blur', this.listeners.inputsBlur);
    });
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.reveal.removeEventListener('click', this.listeners.click);
    this.dom.signin.removeEventListener('blur', this.listeners.blur);
    this.dom.signin.removeEventListener('submit', this.listeners.submit);

    const inputs = [this.dom.inputUsername, this.dom.inputPassword];

    inputs.forEach((input) => {
      input.removeEventListener('focus', this.listeners.focus);
    });

    inputs.forEach((input) => {
      input.removeEventListener('blur', this.listeners.inputsBlur);
    });
  }

  /**
   * Show password.
   * @private
   */
  _revealPassword() {
    const icon = this.dom.signin.querySelector('.reveal .icon');
    const message = this.dom.reveal.querySelector('.message');

    if (this.dom.inputPassword.type === 'password') {
      this.dom.inputPassword.type = 'text';
      icon.classList.remove('icon-eye');
      icon.classList.add('icon-eye-solid');
      message.innerText = 'Hide password';
    } else {
      this.dom.inputPassword.type = 'password';
      icon.classList.remove('icon-eye-solid');
      icon.classList.add('icon-eye');
      message.innerText = 'Show password';
    }
  }

  /**
   * Remove native input validation.
   * @private
   */
  _removeNativeValidation() {
    this.dom.form.setAttribute('novalidate', true);
  }

  /**
   * Validate when user leaves an input field.
   * @private
   * @param {Event} evt - Field event.
   */
  _validateFieldOnBlur(evt) {
    const inputField = evt.target;
    const field = inputField.parentNode;
    const hint = field.querySelector('.hint');

    if (field.classList.contains('validate')) {
      const error = this._getErrorType(inputField);

      if (error && error !== this.messages.valueMissing) {
        hint.innerText = error;
        inputField.classList.add('invalid');
      } else {
        inputField.classList.remove('invalid');
        inputField.classList.add('hidden');
      }
    }
  }

  /**
   * Validate when user submits the form.
   * @private
   * @param {Event} evt - Field event.
   */
  _validateFormOnSubmit(evt) {
    const formFields = evt.target.querySelectorAll('.field');

    Array.from(formFields).forEach((field, i) => {
      const inputField = field.querySelector('input');
      const hint = field.querySelector('.hint');
      const error = this._getErrorType(inputField);

      if (error) {
        hint.innerText = error;
        inputField.classList.add('invalid');
        evt.preventDefault();
        this.props.validFields[i] = false;
      } else {
        inputField.classList.remove('invalid');
        inputField.classList.add('hidden');
        this.props.validFields[i] = true;
      }
    });

    const allFieldsValid = this.props.validFields.every(state => state === true);

    // This is just for demo purposes
    if (allFieldsValid) {
      this._successSignIn();
    }
  }

  /**
   * Get error type.
   * @private
   * @param {HTMLInputElement} field - input field.
   * @return {String} proper error message.
   */
  _getErrorType(field) {
    if (field.disabled
      || field.type === 'file'
      || field.type === 'reset'
      || field.type === 'submit'
      || field.type === 'button') {
      return;
    }

    const validity = field.validity;

    if (validity.valid) return;

    if (validity.valueMissing) return this.messages.valueMissing;

    if (validity.typeMismatch) {
      if (field.type === 'email') return this.messages.typeMismatch.email;
      return this.messages.typeMismatch.fallback;
    }

    if (validity.patternMismatch) {
      if (field.classList.contains('signum')) return this.messages.patternMismatch.signum;
      return this.messages.patternMismatch.fallback;
    }

    return this.messages.fallback;
  }

  /**
   * Hide form on successful sign in and show preloader.
   * @private
   */
  _successSignIn() {
    this._hideSignInForm();
    this._showWelcomeScreen();

    // This is just for demo purposes
    setTimeout(() => {
      window.location.href = this.dom.loggedInUrl;
    }, 3000);
  }

  /**
   * Show welcome screen.
   * @private
   */
  _showWelcomeScreen() {
    this.dom.welcome.classList.remove('hidden');
  }

  /**
   * Hide form.
   * @private
   */
  _hideSignInForm() {
    this.dom.form.classList.add('hidden');
  }

  /**
   * Add filled class.
   * @private
   */
  _labelAnimation(evt){
    evt.target.classList.add('field-filled');
  }

  /**
   * Remove filled class.
   * @private
   */
  _checkEmptyField(evt){
    const target = evt.target;

    if (target.value.length === 0){
      target.classList.remove('field-filled');
    }
  }
}
