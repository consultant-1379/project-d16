/**
 * @file Module to create Wizard Footer component.
 */

/**
 * Class representing a wizard footer.
 */
export class WizardFooter {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      wizardFooter: element,
      nextAction: element.querySelector('#wizard-next'),
      prevAction: element.querySelector('#wizard-previous')
    };
    this.listeners = {
      nextStep: () => this.nextStep(),
      prevStep: () => this.prevStep(),
      updateButtons: (evt) => this.updateButtons(evt)
    };
    this.target = element.dataset.target;
    this.wizardState = undefined;
    this.events = {
      wizardStateChange: new CustomEvent('wizardStateChange', {
        detail: {
          message: 'state changed'
        },
        bubbles: true,
        cancelable: true
      }),
      wizardShowNextSteps: new CustomEvent('wizardShowNextSteps', {
        detail: {
          message: 'show next steps'
        },
        bubbles: true,
        cancelable: true
      }),
      wizardShowPrevSteps: new CustomEvent('wizardShowPrevSteps', {
        detail: {
          message: 'show prev steps'
        },
        bubbles: true,
        cancelable: true
      }),
      wizardFinished: new CustomEvent('wizardFinished', {
        detail: {
          message: 'finished'
        },
        bubbles: true,
        cancelable: true
      }),
    };
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.nextAction.addEventListener('click', this.listeners.nextStep);
    this.dom.prevAction.addEventListener('click', this.listeners.prevStep);
    document.addEventListener('wizardState', this.listeners.updateButtons);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.nextAction.removeEventListener('click', this.listeners.nextStep);
    this.dom.prevAction.removeEventListener('click', this.listeners.prevStep);
    document.removeEventListener('wizardState', this.listeners.updateButtons);
  }

  nextStep() {
    const currentStep = this.wizardState.currentStep;
    const lastStepPresentation = this.wizardState.presentation.slice(-1)[0];

    if (currentStep >= 0 && currentStep < this.wizardState.numSteps) {
      this.wizardState.currentStep += 1;
      this.events.wizardStateChange.detail.state = this.wizardState;
      document.dispatchEvent(this.events.wizardStateChange);
      if (currentStep === lastStepPresentation - 1) {
        document.dispatchEvent(this.events.wizardShowNextSteps);
      }
    }
  }

  prevStep() {
    const currentStep = this.wizardState.currentStep;
    const firstStepPresentation = this.wizardState.presentation[0];

    if (currentStep > 0) {
      this.wizardState.currentStep -= 1;
      this.events.wizardStateChange.detail.state = this.wizardState;
      document.dispatchEvent(this.events.wizardStateChange);

      if (currentStep === firstStepPresentation) {
        document.dispatchEvent(this.events.wizardShowPrevSteps);
      }
    }
  }

  updateButtons(evt) {
    this.wizardState = evt.detail.state;
    const currentStep = evt.detail.state.currentStep;

    if (currentStep === evt.detail.state.numSteps - 1) {
      this.dom.nextAction.innerHTML = 'Finish';
    } else {
      this.dom.nextAction.disabled = false;
      this.dom.nextAction.innerHTML = '<span class="term">Next</span> <i class="icon icon-arrow-right"></i>';
    }

    if (currentStep > 0) {
      this.dom.prevAction.classList.remove('hidden');
    } else {
      this.dom.prevAction.classList.add('hidden');
    }

    if (currentStep === evt.detail.state.numSteps) {
      this.dom.nextAction.innerHTML = 'Finished';
      if (this.dom.prevAction.parentNode !== null) {
        this.dom.prevAction.parentNode.removeChild(this.dom.prevAction);
        this.dom.prevAction.disabled = false;
      }
      this.dom.nextAction.disabled = true;
      document.dispatchEvent(this.events.wizardFinished);
    }
  }
}
