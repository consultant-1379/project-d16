import mapboxgl from 'mapbox-gl';

// eslint-disable-next-line max-len
mapboxgl.accessToken = 'pk.eyJ1IjoiZGFuaWVsLWVyaWNzc29uIiwiYSI6ImNqZnh3cng0NTEzZTcyd2tkYWJhOGN3czIifQ.Nyg8nQf7s8nqW81xcL2hwg';

const geoJSONLines = {
  type: 'FeatureCollection',
  features: [
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [17.97024, 59.33568],
          [17.97719, 59.32736],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [17.97024, 59.33568],
          [17.98088, 59.33244],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [17.97024, 59.33568],
          [17.97410, 59.33940],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [18.05300, 59.33165],
          [18.08208, 59.33631],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [18.03590, 59.33412],
          [18.05300, 59.33165],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [18.03590, 59.33412],
          [18.01344, 59.33604],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [18.03590, 59.33412],
          [18.03021, 59.33745],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [18.03590, 59.33412],
          [18.02760, 59.33000],
        ],
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: [
          [18.06384, 59.32605],
          [18.05300, 59.33165],
        ],
      },
    },
  ],
};

const geoJSON = {
  type: 'FeatureCollection',
  features: [
    {
      type: 'Feature',
      geometry: {
        type: 'nodeBig',
        coordinates: [18.03590, 59.33412],
      },
      properties: {
        title: 'VDC 01',
        description: 'Node 1',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node-warning',
        coordinates: [18.08208, 59.33631],
      },
      properties: {
        title: 'VDC 05',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node',
        coordinates: [18.06384, 59.32605],
      },
      properties: {
        title: 'VDC 03',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'server',
        coordinates: [18.05300, 59.33165],
      },
      properties: {
        title: 'VDC 04',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node',
        coordinates: [18.03021, 59.33745],
      },
      properties: {
        title: 'VDC 02',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node',
        coordinates: [18.01344, 59.33604],
      },
      properties: {
        title: 'VDC 06',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node-warning',
        coordinates: [18.02760, 59.33000],
      },
      properties: {
        title: 'VDC 07',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'nodeBig',
        coordinates: [17.97024, 59.33568],
      },
      properties: {
        title: 'VDC 08',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node',
        coordinates: [17.98088, 59.33244],
      },
      properties: {
        title: 'VDC 09',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node',
        coordinates: [17.97719, 59.32736],
      },
      properties: {
        title: 'VDC 10',
        description: 'Node 2',
      },
    },
    {
      type: 'Feature',
      geometry: {
        type: 'node',
        coordinates: [17.97410, 59.33940],
      },
      properties: {
        title: 'VDC 11',
        description: 'Node 2',
      },
    },
  ],
};

export class Map {
  constructor() {
    this.mapCenter = [18.03590, 59.33412];

    this.themes = {
      dark: 'mapbox/dark-v9',
      light: 'mapbox/light-v8',
    };

    this.lineColors = {
      dark: '#F2F2F2',
      light: '#242424',
    };

    this.loadedTheme = document.querySelector('body').classList;
    this.map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/' + this.themes[this.loadedTheme],
      center: [18.03590, 59.33412],
      zoom: 12,
    });

    this.listeners = {
      centerMap: this.centerMap.bind(this),
      switchTheme: this.switchTheme.bind(this)
    };

    this.lines = {
      id: 'routes',
      type: 'line',
      source: {
        type: 'geojson',
        data: geoJSONLines,
      },
      layout: {
        'line-join': 'round',
        'line-cap': 'round',
      },
      paint: {
        'line-color': '#333',
        'line-width': 2,
        'line-dasharray': [1, 2],
        'line-opacity': 1,
      },
    };
  }

  init() {
    // Add zoom and rotation controls to the map.
    this.map.addControl(new mapboxgl.NavigationControl());

    /*
     * const mapBoundaries = {
     *   topLeft: [17.92821, 59.34554],
     *   bottomRight: [18.09953, 59.31703],
     * };
     */

    // add markers to map
    Array.from(geoJSON.features).forEach((marker) => {

      // create a HTML element for each feature
      const el = document.createElement('div');
      if (marker.geometry.type !== undefined) {
        el.className = marker.geometry.type.toString();
      } else {
        el.className = 'node';
      }

      // make a marker for each feature and add to the map
      new mapboxgl.Marker(el)
        .setLngLat(marker.geometry.coordinates)
        .addTo(this.map);

      new mapboxgl.Marker(el)
        .setLngLat(marker.geometry.coordinates)
        .setPopup(new mapboxgl
          .Popup({ offset: 25 })
          .setHTML(`<span class="map-popup-header">${marker.properties.title}</span>`))
        .addTo(this.map);
    });

    this.map.on('load', () => {
      this.map.addLayer(this.lines);
    });

    this.addEventListeners();
  }

  addEventListeners() {
    document.addEventListener('maximizeTile', this.listeners.centerMap);
    document.addEventListener('minimizeTile', this.listeners.centerMap);
    document.addEventListener('toggleNavigation', this.listeners.centerMap);
    document.addEventListener('switchTheme', this.listeners.switchTheme);
  }

  removeEventListeners() {
    document.removeEventListener('maximizeTile', this.listeners.centerMap);
    document.removeEventListener('minimizeTile', this.listeners.centerMap);
    document.removeEventListener('toggleNavigation', this.listeners.centerMap);
    document.removeEventListener('switchTheme', this.listeners.switchTheme);
  }

  centerMap() {
    setTimeout(() => {
      this.map.resize();
      this.map.flyTo({ center: this.mapCenter });
    }, 600);
  }

  switchTheme(event) {
    this.loadedTheme = event.detail.theme;
    this.map.setStyle('mapbox://styles/' + this.themes[this.loadedTheme]);
    this.map.on('style.load', () => {
      this.lines.paint['line-color'] = this.lineColors[this.loadedTheme];
      if (!this.map.getLayer(this.lines.id)) {
        this.map.addLayer(this.lines);
      } else {
        this.map.setPaintProperty(this.lines.id, 'line-color', this.lineColors[this.loadedTheme]);
      }
    });
  }

  destroy() {
    this.removeEventListeners();
  }
}
