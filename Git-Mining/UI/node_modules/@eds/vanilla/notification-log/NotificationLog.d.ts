import { Notification } from '..';

interface SetNotificationProps {
  title: string;
  description?: string;
  action?: Function;
  timestamp?: Date;
  id?: number;
}

interface StateNotificationProps  extends SetNotificationProps {
  isNew: boolean;
}

export declare const NotificationLog: {
  dom: {
    notificationLog: Element;
    notificationLogContainer: Element;
    notificationLogTrigger: Element;
    notificationLogNumber: Element;
    notificationLogEmpty: Element;
  };
  state: {
    isNew: number,
    seen: boolean,
    notifications: StateNotificationProps[],
    notificationsDOM: HTMLDivElement[],
    liveNotification: Notification
  };
  listeners: {
    clickTrigger: Function;
    SyspanelOpenEvent: Function;
    SyspanelTabEvent: Function;
    SyspanelCloseEvent: Function;
  };
  events: {
    toggleSyspanel: CustomEvent;
    NotificationLogCounterUpdate: CustomEvent;
  };
  notificationTimeout: number;
  init(): void;
  destroy(): void;
  _addEventListeners(): void;
  _removeEventListeners(): void;
  setNotification(notification: SetNotificationProps): void;
  loadNotificationLog(notifications: StateNotificationProps[]): void;
  getNotifications(): StateNotificationProps[];
  setNotificationTimeout(ms: number): void;
  _showLiveNotification(notification: SetNotificationProps): void;
  _removeLiveNotification(): void;
  _prependToLog(notification: SetNotificationProps): void;
  _updateCounter(): void;
  _markAsSeen(item: HTMLElement): void;
  _markAllAsSeen(): void;
  _clickTrigger(): void;
  _clearNotification(): void;
  _clearAllNotifications(): void;
  _removeEmptyMessage(): void;
  _getRelativeTime(timestamp: Date): string;
  _updateTimes(): void;
};
