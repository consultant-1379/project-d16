/**
 * @deprecated since version 3.7.0
 */

/**
 * @file Module to create selectable table component.
 */

/**
 * Class representing a selectable table.
 */
export class TableSelectable {

  /**
   * Setup table properties.
   * @param {HTMLElement} element - The DOM element of the table.
   */
  constructor(element) {
    this.dom = {
      table: element,
      rows: element.querySelectorAll('tr'),
      bodyRows: element.querySelectorAll('tbody tr'),
      masterCheckbox: element.querySelector('thead input[type="checkbox"]'),
    };
    this.listeners = {
      rows: [],
      clickBodyRow: (evt) => {
        evt.preventDefault();
        this._toggleRowCheckbox(evt);
        this._setMasterCheckboxState();
      },
      clickMasterCheckbox: () => {
        this._toggleAllCheckboxes();
        this._setMasterCheckboxState();
      },
    };
    this.settings = {
      selectRowOnFirstTDClick: true,
    };
    this.events = {
      tableRowsSelected: new CustomEvent('tableRowsSelected', {
        detail: { body: undefined, selected: undefined },
      }),
    };
  }

  /**
   * Initialize table.
   * @public
   */
  init() {
    this._setMasterCheckboxState();
    this._addEventListeners();
  }

  /**
   * Destroy SignIn page and associated events.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    if (this._isSelectable()) {
      this.dom.masterCheckbox.addEventListener('click', this.listeners.clickMasterCheckbox);

      Array.from(this.dom.bodyRows).forEach((bodyRow) => {
        if (this.settings.selectRowOnFirstTDClick) {
          const checkboxTD = bodyRow.querySelectorAll('td')[0];
          checkboxTD.addEventListener('click', this.listeners.clickBodyRow, false);
        } else {
          bodyRow.addEventListener('click', this.listeners.clickBodyRow, false);
        }
      });

    }
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    if (this._isSelectable()) {
      this.listeners.rows = [];
      this.dom.masterCheckbox.removeEventListener('click', this.listeners.clickMasterCheckbox);

      Array.from(this.dom.bodyRows).forEach((bodyRow) => {
        if (this.settings.selectRowOnFirstTDClick) {
          const checkboxTD = bodyRow.querySelectorAll('td')[0];
          checkboxTD.removeEventListener('click', this.listeners.clickBodyRow, false);
        } else {
          bodyRow.removeEventListener('click', this.listeners.clickBodyRow, false);
        }
      });
    }
  }

  /**
   * Toggle row checkbox.
   * @private
   * @param {Event} evt - Click event.
   * @param {HTMLElement} evt.target - Clicked element (tr or td with checkbox).
   */
  _toggleRowCheckbox({target}) {
    const row = target.closest('tr');
    if (row.classList.contains('selected')) {
      this._unselectRow(row);
    } else {
      this._selectRow(row);
    }
  }

  /**
   * Toggle all checkboxes.
   * @private
   */
  _toggleAllCheckboxes() {
    Array.from(this.dom.bodyRows).forEach(brow => {
      if (this.dom.masterCheckbox.checked) {
        this._selectRow(brow);
      } else {
        this._unselectRow(brow);
      }
    });
  }

  /**
   * Set master checkbox state.
   * @private
   */
  _setMasterCheckboxState() {
    const numBodyRows = this._getNumberOfRows();
    const numCheckedRows = this._getNumberOfSelectedRows();
    this.dom.masterCheckbox.checked = numCheckedRows > 0;
    this.dom.masterCheckbox.indeterminate = numCheckedRows > 0 && numCheckedRows < numBodyRows;
  }

  /**
   * Get number of selected rows.
   * @private
   */
  _getNumberOfSelectedRows() {
    const n = this.dom.table.querySelectorAll('tbody input[type="checkbox"]:checked').length;
    this.events.tableRowsSelected.detail.body = this._getNumberOfRows();
    this.events.tableRowsSelected.detail.selected = n;
    document.dispatchEvent(this.events.tableRowsSelected);
    return n;
  }

  /**
   * Get total number of rows.
   * @private
   */
  _getNumberOfRows() {
    return Array.from(this.dom.bodyRows).length;
  }

  /**
   * Select row.
   * @private
   * @param {HTMLElement} row - table row.
   */
  _selectRow(row) {
    const checkbox = row.querySelector('input[type="checkbox"]');
    row.classList.add('selected');
    checkbox.checked = true;
  }

  /**
   * Unselect row.
   * @private
   * @param {HTMLElement} row - table row.
   */
  _unselectRow(row) {
    const checkbox = row.querySelector('input[type="checkbox"]');
    row.classList.remove('selected');
    checkbox.checked = false;
  }

  /**
   * Check if table is selectable.
   * @private
   * @return {Boolean} - Returns true if the table contains the 'selectable' class.
   */
  _isSelectable() {
    return !!this.dom.table.classList.contains('selectable');
  }

}
