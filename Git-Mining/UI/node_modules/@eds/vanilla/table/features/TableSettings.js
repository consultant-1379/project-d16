import { createFromMarkup } from './utils';
import { Dialog } from '../../dialog/Dialog';
import { Card } from '../../card/Card';
import { DropAreas } from '../../card/DropAreas';
import Editable from './Editable';

export default class TableSettings {
  constructor(table) {
    this.component = table;
    this.dom = this.component.dom;
    this.dialog = null;
    this.dialogDOM = null;
    this.btnReset = null;
    this.btnCancel = null;
    this.btnApply = null;
    this.initialColumns = [];
    this.editableTitles = [];


    this.listeners = {
      onResetClick: (evt) => this._onResetClick(evt),
      onApplyClick: (evt) => this._onApplyClick(evt),
      onDialogClose: () => this._renderDropArea(),
    };
  }

  init() {
    this.initialColumns = Array.from(this.component.settings.columns).filter((col) => col.title);

    this._render();
    this._addEventListeners();
  }

  destroy() {
    this._removeEventListeners();

    this.editableTitles.forEach((editable) => editable.destroy());
  }

  _addEventListeners() {
    this.btnReset.addEventListener('click', this.listeners.onResetClick);
    this.btnApply.addEventListener('click', this.listeners.onApplyClick);

    // Reset changes when dialog closed
    this.dialogDOM.addEventListener('DialogClose', this.listeners.onDialogClose);
  }

  _removeEventListeners() {
    this.btnReset.removeEventListener('click', this.listeners.onResetClick);
    this.btnApply.removeEventListener('click', this.listeners.onApplyClick);

    this.dialogDOM.removeEventListener('DialogClose', this.listeners.onDialogClose);
  }

  _render() {
    this._renderDialog();
    this._renderDropArea();
  }

  _renderDialog() {
    this.dialogDOM = createFromMarkup(this._getDialogMarkup());
    document.querySelector('.appbody').append(this.dialogDOM);

    this.dialog = new Dialog(this.dialogDOM);
    this.dialog.init();

    this.btnReset = this.dialogDOM.querySelector('[data-action="reset"]');
    this.btnApply = this.dialogDOM.querySelector('[data-action="apply"]');
  }

  _renderDropArea(columnsList) {
    const columns = columnsList || Array.from(this.component.settings.columns).filter((col) => col.title);

    // Remove old editables
    this.editableTitles.forEach((editable) => editable.destroy());
    this.editableTitles.splice(0, this.editableTitles.length);

    this.dialogDOM.querySelector('.content > .body')
      .replaceChild(createFromMarkup(this._getDropAreaMarkup(columns)), this.dialogDOM.querySelector('.drop-area'));

    this.dialogDOM.querySelectorAll('.card').forEach((cardDOM) => {
      const card = new Card(cardDOM);
      card.init();
    });

    this.dialogDOM.querySelectorAll('.title .editable').forEach((title) => {
      this.editableTitles.push(new Editable(title, () => {
        title.closest('.title').dataset.text = title.innerText;
      }));
    });

    const dropAreas = new DropAreas(Array.from(this.dialogDOM.querySelectorAll('.drop-area')));
    dropAreas.init();
  }

  _getDialogMarkup() {
    return `<div class="dialog table-settings" data-trigger="#${this.dom.tableSettingsIcon.id}" data-type="simple">
      <div class="content" style="overflow: scroll;">
        <div class="top">
          <div class="title">Manage columns</div>
        </div>
        <div class="body">
          <p>Rename, hide, rearrange columns, or freeze first column.</p>
          <div style="display: flex; justify-content: flex-end; padding: 8px 16px;">
            <span style="width: 50px; text-align: center">Freeze</span>
            <span style="width: 50px; text-align: center">Show</span>
          </div>

          <div class="drop-area"></div>

        </div>
        <div class="bottom" style="display: flex; align-items: center;">
          <a href="#" style="margin-right: auto;" data-action="reset">Reset</a>
          <button class="btn ghost" data-close="true">Cancel</button>
          <button class="btn primary" data-action="apply">Apply</button>
        </div>
      </div>
    </div>`;
  }

  _getDropAreaMarkup(columns) {
    return `<div class="drop-area">
      ${columns.map((col, index) => `<div class="card draggable" data-key="${col.key}">
        <div class="header">
          <div class="left">
            <div class="title" data-text="${col.title}"><span class="editable">${col.title}</span></div>
          </div>
          <div class="right">
            <span class="freeze-checkbox">
              <input type="checkbox" id="${this.dom.table.id}-freeze${index}" ${col.freeze ? 'checked' : ''}>
              <label for="${this.dom.table.id}-freeze${index}"></label>
            </span>
            <span class="show-checkbox">
               <input type="checkbox" id="${this.dom.table.id}-show${index}" ${col.hidden ? '' : 'checked'}>
               <label for="${this.dom.table.id}-show${index}"></label>
            </span>
          </div>
        </div>
      </div>`).join('')}
    </div>`;
  }

  _onResetClick(evt) {
    evt.preventDefault();
    this._renderDropArea(this.initialColumns);
  }

  _onApplyClick(evt) {
    evt.preventDefault();

    const newColumns = [];
    this.dialogDOM.querySelectorAll('.card').forEach((card) => {
      const column = {...this.component.settings.columns.find((col) => col.key === card.dataset.key),
        title: card.querySelector('.title').dataset.text,
        hidden: !card.querySelector('.show-checkbox input').checked,
        freeze: !this._isHidden(card.querySelector('.freeze-checkbox')) &&
          card.querySelector('.freeze-checkbox input').checked
      };
      newColumns.push(column);
    });

    this.component.updateColumns(newColumns);
    if (this.component.features['sort']) {
      this.component.features['sort'].enable();
    }

    this.dialog.hide();
  }

  _isHidden(el) {
    const style = window.getComputedStyle(el);
    return (style.display === 'none');
  }

}
