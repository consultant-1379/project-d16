/**
 * @file Module to describe Table Select feature.
 */

import { createFromMarkup } from './utils';
import { Dropdown } from '../../dropdown/Dropdown';

/**
 * Class representing Table Select feature.
 */
export default class TableSelect {
  constructor(table) {
    this.component = table;
    this.dom = this.component.dom;

    this.listeners = {
      clickBodyRowSingle: (evt) => {
        if (evt.target.tagName === 'TD') {
          const clickedRow = evt.target.closest('tr');

          if (clickedRow && clickedRow.classList.contains('selected')) {
            this._unselectRow(clickedRow);
          } else {
            // Unselect displayed rows
            const selectedRow = this.dom.table.querySelector('tr.selected');
            if (selectedRow) {
              this._unselectRow(selectedRow);
            }
            // Unselect all data that is not displayed
            this.component.model.deselectAll();
            this._selectRow(clickedRow);
          }
        }
      },
      clickBodyRowMulti: (evt) => {
        this._toggleRow(evt);
        this.setMasterCheckboxState();
      },
      clickMasterCheckbox: () => {
        this._toggleAllCheckboxes();
        this.setMasterCheckboxState();
      },
      clickMasterDropdown: (evt) => {
        if (evt.target.classList.contains('item')) {
          const val = evt.target.dataset.value;
          if (val === 'all') {
            this.component.model.selectAll();
            this.masterCheckbox.checked = true;
          }

          if (val === 'none') {
            this.component.model.deselectAll();
            this.masterCheckbox.checked = false;
          }
          this._toggleAllCheckboxes();
          this.setMasterCheckboxState();
        }
      },
      onTableUpdate: () => this.setMasterCheckboxState()
    };
  }

  init(selectType) {
    this.selectType = selectType;

    if (this.selectType === 'single') {
      this._updateSingleSelect();
    }

    if (this.selectType === 'multi') {
      this.dom.table.classList.add('selectable');
      this._renderEmptyTh();
      this._renderRowCheckboxes();
      this._renderMasterCheckbox();
    }

    this._addEventListeners();
  }

  destroy() {
    this._removeEventListeners();
  }

  update() {
    if (this.selectType === 'single') {
      this._updateSingleSelect();
    }

    if (this.selectType === 'multi') {
      this._renderRowCheckboxes();
      this.setMasterCheckboxState();
    }
  }

  _addEventListeners() {
    this.dom.table.addEventListener('tableUpdate', this.listeners.onTableUpdate);

    if (this.selectType === 'single') {
      this.dom.table.addEventListener('click', this.listeners.clickBodyRowSingle);
    }

    // Listeners for checkboxes are added on creation to work correctly when new row is added
  }

  _removeEventListeners() {
    this.dom.table.removeEventListener('tableUpdate', this.listeners.onTableUpdate);
    this.masterCheckbox.removeEventListener('change', this.listeners.clickMasterCheckbox);

    if (this.masterCheckboxDropdown) {
      this.masterCheckboxDropdown.removeEventListener('click', this.listeners.clickMasterDropdown);
    }

    this.dom.bodyRows.forEach((bodyRow) => {
      const checkboxTD = bodyRow.querySelectorAll('td')[0];
      checkboxTD.querySelector('input').removeEventListener('change', this.listeners.clickBodyRowSingle);
    });

    if (this.selectType === 'single') {
      this.dom.table.removeEventListener('click', this.listeners.clickBodyRowSingle);
    }
  }

  _renderEmptyTh() {
    const row = this.dom.thead.querySelector('tr');
    const th = document.createElement('th');
    row.insertBefore(th, row.firstChild);
  }

  /**
   * Create master checkbox. Click on the checkbox will toggle all rows on the current page.
   * @private
   */
  _renderMasterCheckbox() {
    const th = this.dom.thead.querySelectorAll('tr th')[0];
    th.classList.add('cell-select');
    this.masterCheckbox = document.createElement('input');

    this.masterCheckbox.setAttribute('type', 'checkbox');
    this.masterCheckbox.id = `${this.dom.table.id}-master`;

    const label = document.createElement('label');
    label.classList.add('checkbox', 'select-row');
    label.setAttribute('for', `${this.dom.table.id}-master`);

    th.append(this.masterCheckbox);
    th.append(label);

    if (this.dom.tablePagination) {
      this._renderCheckboxDropdown(th);
      th.classList.add('wide');
    }

    this.masterCheckbox.addEventListener('change', this.listeners.clickMasterCheckbox);

    this.setMasterCheckboxState();
  }

  /**
   * Create dropdown with advanced master select options.
   * @private
   * @param {HTMLElement} th
   */
  _renderCheckboxDropdown(th) {
    const markup = `<div class="dropdown more" data-type="click">
      <button class="btn clickable"><i class="icon icon-more"></i></button>
      <div class="menu start">
        <div class="item" data-value="all">Select items from all pages</div>
        <div class="item" data-value="none">Deselect items from all pages</div>
      </div>
    </div>`;

    this.masterCheckboxDropdown = createFromMarkup(markup);
    th.append(this.masterCheckboxDropdown);

    const dropdown = new Dropdown(this.masterCheckboxDropdown);
    dropdown.init();

    this.masterCheckboxDropdown.querySelector('.menu').addEventListener('click', this.listeners.clickMasterDropdown);

    this._setMasterCheckboxDropdownState();
  }

  /**
   * Create checkboxes in every row.
   * @private
   */
  _renderRowCheckboxes() {
    this.dom.bodyRows.forEach((row, index) => {
      // Skip if input already exists
      if (row.querySelector('td.cell-select input')) {
        return;
      }

      // Create td and input
      const td = document.createElement('td', );
      td.classList.add('cell-select');
      this._createCheckbox(td, `${this.dom.table.id}-row${index}`);

      row.insertBefore(td, row.firstChild);

      // Pre-selected rows
      if (this.component.model.displayedData[index].selected) {
        this._selectRow(row);
      }

      if (this.component.features['info']) {
        this.component.features['info'].updateNumSelected();
      }

    });

    Array.from(this.dom.tbody.querySelectorAll('tr.details-row')).forEach((row) => {
      let emptyTd = row.querySelector('td.cell-select');
      if (!emptyTd) {
        emptyTd = document.createElement('td');
        emptyTd.classList.add('cell-select');
        row.prepend(emptyTd);
      }
    });
  }

  /**
   * Create input checkbox and label
   * @private
   * @param {HTMLElement} cell
   * @param {string} id
   */
  _createCheckbox(cell, id) {
    const input = document.createElement('input');
    input.setAttribute('type', 'checkbox');
    input.id = id;

    const label = document.createElement('label');
    label.classList.add('checkbox', 'select-row');
    label.setAttribute('for', id);

    cell.append(input);
    cell.append(label);

    input.addEventListener('change', this.listeners.clickBodyRowMulti);
  }

  /**
   * Set master checkbox state.
   * @private
   */
  setMasterCheckboxState() {
    if (!this.masterCheckbox) return;

    const numBodyRows = this._getNumberOfRows();
    const numCheckedRows = this._getNumberOfSelectedRows();
    this.masterCheckbox.checked = numCheckedRows > 0;
    this.masterCheckbox.indeterminate = numCheckedRows > 0 && numCheckedRows < numBodyRows;
    this.masterCheckbox.toggleAttribute('disabled', this.component.data.length === 0);

    this._setMasterCheckboxDropdownState();
  }

  /**
   * Hide / show dropdown items depending on selected rows
   * @private
   */
  _setMasterCheckboxDropdownState() {
    if (!this.masterCheckboxDropdown) return;

    this.masterCheckboxDropdown.querySelector('button').toggleAttribute('disabled', this.component.data.length === 0);

    const hideSelectAll = (this.component.selected.length === this.component.data.length);
    const hideDeselectAll = (this.component.selected.length === 0);

    this.masterCheckboxDropdown.querySelector('.item[data-value="all"]').classList.toggle('disabled', hideSelectAll);
    this.masterCheckboxDropdown.querySelector('.item[data-value="none"]').classList.toggle('disabled', hideDeselectAll);
  }

  /**
   * Toggle all checkboxes.
   * @private
   */
  _toggleAllCheckboxes() {
    this.dom.bodyRows.forEach(row => {
      if (this.masterCheckbox.checked) {
        this._selectRow(row);
      } else {
        this._unselectRow(row);
      }
    });
  }

  /**
   * Toggle row.
   * @private
   * @param {Event} evt - Click event.
   * @param {HTMLElement} evt.target - Clicked element (tr or td with checkbox).
   */
  _toggleRow({target}) {
    const row = target.closest('tr');
    if (row.classList.contains('selected')) {
      this._unselectRow(row);
    } else {
      this._selectRow(row);
    }
  }

  /**
   * Select row.
   * @private
   * @param {HTMLElement} row - table row.
   */
  _selectRow(row) {
    row.classList.add('selected');

    // Check checkbox in multi select
    if (row.querySelector('td.cell-select input')) {
      row.querySelector('td.cell-select input').checked = true;
    }

    // Update data
    const index = this._getRowIndex(row);

    this.component.model.selectByIndex(index);

    this.dom.table.dispatchEvent(new CustomEvent('toggleSelectRow', {
      detail: {
        row: row,
        data: this.component.model.data[index]
      }
    }));

    this.dom.table.dispatchEvent(new CustomEvent('selectRow', {
      detail: {
        row: row,
        data: this.component.model.data[index]
      }
    }));
  }

  /**
   * Unselect row.
   * @private
   * @param {HTMLElement} row - table row.
   */
  _unselectRow(row) {
    row.classList.remove('selected');

    // Uncheck checkbox in multi select
    if (row.querySelector('td.cell-select input')) {
      row.querySelector('td.cell-select input').checked = false;
    }

    // Update data
    const index = this.component.getIndexByRow(row);
    this.component.model.deselectByIndex(index);

    this.dom.table.dispatchEvent(new CustomEvent('toggleSelectRow', {
      detail: {
        row: row,
        data: this.component.model.data[index]
      }
    }));

    this.dom.table.dispatchEvent(new CustomEvent('unselectRow', {
      detail: {
        row: row,
        data: this.component.model.data[index]
      }
    }));
  }

  /**
   * Get total number of rows.
   * @private
   */
  _getNumberOfRows() {
    return this.dom.bodyRows.length;
  }

  /**
   * Get number of selected rows.
   * @private
   */
  _getNumberOfSelectedRows() {
    return this.dom.table.querySelectorAll('tbody input[type="checkbox"]:checked').length;
  }

  _updateSingleSelect() {
    this.dom.bodyRows.forEach((row, index) => {
      row.classList.toggle('selected', this.component.model.displayedData[index].selected);

      if (this.component.features['info']) {
        this.component.features['info'].updateNumSelected();
      }
    });
  }

  /**
   * Calculate index of row in data.
   * @private
   */
  _getRowIndex(tr) {
    let index = Array.from(this.dom.bodyRows).indexOf(tr);

    if (this.component.pagination) {
      index = (this.component.pagination.state.currentPage - 1) * this.component.pagination.state.numPerPage + index;
    }

    return index;
  }


}
