interface ColumnsProps {
  key: string;
  title: string;
  width?: string;
  minWidth?: string;
  maxWidth?: string;
  headerClass?: string;
  headerStyle?: string;
  cellClass?: string;
  cellStyle?: string;
  sort?: 'none' | 'asc' | 'desc';
  visible?: boolean;
  freeze?: boolean;
  tooltip?: TooltipProps;
  type?: string;
}

interface TooltipProps {
  text: string;
  position?: string;
  width?: string;
}

export declare class Table {
  private dom: {
    table: HTMLElement;
    rows: NodeListOf<Element>;
    columns: NodeListOf<Element>;
  };
  private listeners: {

  };
  private settings: {
    columns: Array<ColumnsProps>;
    scroll?: boolean;
    height?: string | boolean;
    selectable?: 'single' | 'multi';
    sortable?: 'single' | 'multi';
    expandable?: boolean;
    actions?: boolean;
    rowsPerPage?: number;
    emptyState?: Object;
  };

  data: [];
  selected: [];

  constructor(element: HTMLElement, options: Object);

  init(): void;

  destroy(): void;

  private _addEventListeners(): void;

  private _removeEventListeners(): void;

  update(newData: Object): void;

  updateRows(): void;

  updateColumns(newColumns: Object): void;

  editRow(tr: HTMLElement): void;

  delete(toDelete: HTMLElement | Object): void;

  add(newData: Object): void;
}
