/**
 * @file Module to create Dialog component.
 */

/**
 * Class representing a dialog.
 */
export class Dialog {

  /**
   * Setup properties.
   * @param {HTMLElement} element - The DOM element to append the component.
   */
  constructor(element) {
    this.dom = {
      dialog: element,
      content: element.querySelector('.content'),
      id: element.id,
      closeButtons: []
    };
    this.type = element.dataset.type;
    this.trigger = element.dataset.trigger;
    this.events = {
      closeDialogEvent: new CustomEvent('DialogClose', {
        detail: { id: this.dom.id }
      }),
      showDialogEvent: new CustomEvent('DialogShow', {
        detail: { id: this.dom.id }
      })
    };
    this.listeners = {
      show: () => this.show(),
      hide: () => this.hide(),
      triggerDialog: (evt) => this._triggerDialog(evt)
    };
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this._getCloseButtons();
    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    if (this.trigger) {
      const button = document.querySelector(this.trigger);
      button.addEventListener('click', this.listeners.show);
    } else {
      this.dom.dialog.addEventListener('triggerDialog', this.listeners.triggerDialog);
    }

    this.dom.closeButtons.forEach((button) => {
      button.addEventListener('click', this.listeners.hide);
    });
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    if (this.trigger) {
      const button = document.querySelector(this.trigger);
      button.removeEventListener('click', this.listeners.show);
    } else {
      this.dom.dialog.removeEventListener('triggerDialog', this.listeners.triggerDialog);
    }

    this.dom.closeButtons.forEach((button) => {
      button.removeEventListener('click', this.listeners.hide);
    });
  }

  /**
   * Show dialog.
   * @public
   */
  show() {
    this.dom.dialog.classList.add('show');
    this.dom.dialog.dispatchEvent(this.events.showDialogEvent);
  }

  /**
   * Hide dialog.
   * @public
   */
  hide() {
    this.dom.dialog.classList.remove('show');
    this.dom.dialog.dispatchEvent(this.events.closeDialogEvent);
  }

  /**
   * Find elements to close the dialog (button or icon) and save them for future usage.
   * @private
   */
  _getCloseButtons() {
    const buttons = this.dom.dialog.querySelectorAll('[data-close]');
    for (const button of buttons) {
      this.dom.closeButtons.push(button);
    }
  }

  /**
   * Trigger dialog.
   * @private
   * @param {CustomEvent} evt - Event.
   */
  _triggerDialog(evt) {
    if (evt.detail.id === this.dom.id) {
      this.show();
    }
  }
}
