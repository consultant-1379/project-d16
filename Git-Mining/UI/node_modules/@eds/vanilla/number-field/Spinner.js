/**
 * @file Module to create Spinner component.
 */

/**
 * Class representing a spinner.
 */
export class Spinner {

  /**
   * Setup spinner properties.
   * @param {HTMLElement} element - The DOM element of spinner.
   */
  constructor(element) {
    this.dom = {
      spinner: element,
      controls: element.querySelectorAll('.controls > .icon'),
      max: element.querySelector('input').getAttribute('max') || Number.MAX_VALUE,
      min: element.querySelector('input').getAttribute('min') || -Number.MAX_VALUE,
      step: element.querySelector('input').getAttribute('step') || 1,
      input: element.querySelector('input'),
    };

    this.type = element.dataset.type;

    this.listeners = {
      increaseValue: () => this._increaseValue(),
      decreaseValue: () => this._decreaseValue(),
      setCorrectFormat: () => this._setCorrectFormat(),
      controlsKeyDown: (evt) => this._keyActions(evt),
    };
  }

  /**
   * Initialize spinner.
   * @public
   */
  init() {
    this._setCorrectFormat();
    this._addEventListeners();
  }

  /**
   * Destroy spinner and associated events.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.controls[1].addEventListener('click', this.listeners.increaseValue);
    this.dom.controls[0].addEventListener('click', this.listeners.decreaseValue);
    this.dom.input.addEventListener('change', this.listeners.setCorrectFormat);
    // this.dom.input.addEventListener('keyup', this.listeners.setCorrectFormat);
    this.dom.controls[0].addEventListener('keydown', this.listeners.controlsKeyDown);
    this.dom.controls[1].addEventListener('keydown', this.listeners.controlsKeyDown);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.controls[1].removeEventListener('click', this.listeners.increaseValue);
    this.dom.controls[0].removeEventListener('click', this.listeners.decreaseValue);
    this.dom.input.removeEventListener('change', this.listeners.setCorrectFormat);
    // this.dom.input.removeEventListener('keyup', this.listeners.setCorrectFormat);
    this.dom.controls[0].removeEventListener('keydown', this.listeners.controlsKeyDown);
    this.dom.controls[1].removeEventListener('keydown', this.listeners.controlsKeyDown);
  }

  /**
   * Set correct state.
   * @private
   */
  _setCorrectState() {
    const input = this.dom.spinner.querySelector('input');

    this.dom.controls[0].classList.remove('disabled');
    this.dom.controls[1].classList.remove('disabled');

    if (parseInt(input.value, 10) === parseInt(this.dom.max, 10)) {
      this.dom.controls[1].classList.add('disabled');
    }

    if (parseInt(input.value, 10) === parseInt(this.dom.min, 10)) {
      this.dom.controls[0].classList.add('disabled');
    }
  }

  /**
   * Set correct format.
   * @private
   */
  _setCorrectFormat() {
    const input = this.dom.spinner.querySelector('input');

    if (!isNaN(parseInt(input.value, 10))) {
      if (parseInt(input.value, 10) > this.dom.max) {
        input.value = this.dom.max;
      }
      if (parseInt(input.value, 10) < this.dom.min) {
        input.value = this.dom.min;
      }
    } else {
      // not a number
      input.value = this.dom.min;
    }

    this._setCorrectState();
  }

  /**
   * Increase value.
   * @private
   */
  _increaseValue() {
    const input = this.dom.spinner.querySelector('input');
    if (parseInt(input.value, 10) < this.dom.max) {
      input.value = parseInt(input.value, 10) + parseInt(this.dom.step, 10);
    }

    this._setCorrectFormat();
  }

  /**
   * Decrease value.
   * @private
   */
  _decreaseValue() {
    const input = this.dom.spinner.querySelector('input');
    if (parseInt(input.value, 10) > this.dom.min) {
      input.value = parseInt(input.value, 10) - parseInt(this.dom.step, 10);
    }

    this._setCorrectFormat();
  }

  /**
   * Key actions for controls
   * @private
   * @param {Event} evt - element event
   */

  _keyActions(evt) {
    if (evt.key === ' '){
      evt.preventDefault();

      const control = evt.target;

      if (control.classList.contains('icon-chevron-down')){
        this._decreaseValue();
      } else if (control.classList.contains('icon-chevron-up')){
        this._increaseValue();
      }
    }
  }

  /**
   * Enable input and controls
   * @private
   */
  enable(){
    const input =  this.dom.input;

    input.disabled = false;

    Array.from(this.dom.controls).forEach((control) => {
      control.classList.remove('disabled');
      control.tabIndex = 0;
    });
  }

  /**
   * Disable input and controls
   * @private
   */
  disable(){
    const input =  this.dom.input;

    input.disabled = true;

    Array.from(this.dom.controls).forEach((control) => {
      control.classList.add('disabled');
      control.tabIndex = -1;
    });
  }
}
