/**
 * @file Module to create Pill component.
 */

/**
 * Class representing a pill.
 */
export class Pill {

  /**
   * Setup pill properties.
   * @param {HTMLElement} element - The DOM element of the pill.
   * @param {Function} [action] - The action to trigger on click.
   */
  constructor(element, action) {
    this.dom = {
      pill: element,
    };

    this.listeners = {
      click: () => this._clickAction(),
      onKeyDown: (evt) => {
        if (evt.key === ' '){
          evt.preventDefault();
          this._clickAction();
        }
      },
    };

    this.action = action;
    this.data = {};
  }

  /**
   * Initialize the pill.
   * @public
   */
  init() {
    this.update();
    this._addEventListeners();
  }

  /**
   * Destroy the pill and associated events.
   * @public
   */
  destroy() {
    this._removeEventListeners();
    if (this.dom.pill && this.dom.pill.parentNode) {
      this.dom.pill.parentNode.removeChild(this.dom.pill);
    }
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.pill.addEventListener('click',  this.listeners.click);
    this.dom.pill.addEventListener('keydown', this.listeners.onKeyDown);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.pill.removeEventListener('click',  this.listeners.click);
    this.dom.pill.removeEventListener('keydown', this.listeners.onKeyDown);
  }

  /**
   * What happens on the click event.
   * @private
   */
  _clickAction() {
    this.toggle();
    this.remove();

    if (this.action) this.action();
  }

  /**
   * Toggle the pill.
   * @public
   */
  toggle() {
    if (!this.isSelected()) {
      this.select();
    } else {
      this.unselect();
    }
  }

  /**
   * Select the pill.
   * @public
   */
  select() {
    this.dom.pill.classList.remove('unselected');
  }

  /**
   * Unselect the pill.
   * @public
   */
  unselect() {
    this.dom.pill.classList.add('unselected');
  }

  /**
   * Remove the pill.
   * @public
   */
  remove() {
    if (this.dom.pill.classList.contains('removable')) {
      this.destroy();
    }
  }

  /**
   * Returns true or false if the pill is selected/unselected
   * @public
   * @returns {boolean} - result of check.
   */
  isSelected() {
    return !this.dom.pill.classList.contains('unselected');
  }

  /**
   * Set the appropriate metadata to the pill.
   * @public
   * @param {Object} dataInput - new data.
   */
  setData(dataInput) {
    this.data = dataInput;
  }

  /**
   * Update pill tabindex
   * @public
   */
  update(){
    const pill = this.dom.pill;

    if (pill.classList.contains('removable') || pill.classList.contains('toggle')){
      if (pill.classList.contains('disabled')){
        pill.tabIndex = -1;
      } else {
        pill.tabIndex = 0;
      }
    }
  }
}
