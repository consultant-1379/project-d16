/**
 * @file Module to create Notification component.
 */

/**
 * Class representing a notification.
 */
export class Notification {

  /**
   * Setup properties.
   * @param {Object} props - Notification properties.
   * @param {string} props.title - Sets the title of the notification.
   * @param {string} [props.description] - Sets the description of the notification.
   * @param {Function} [props.action] - The action that will trigger once the user clicks on the notification.
   * @param {number} [props.timeout] - Determines the time until the notification disappears.
   */
  constructor(props) {
    this.dom = {
      notification: null,
      close: null,
    };
    this.props = props || {
      title: 'No notification title',
      description: '',
    };
    this.listeners = {
      click: (evt) => this._handleClick(evt),
      keyDown: (evt) => this._closeOnKeyDown(evt),
    };
  }

  /**
   * Create component.
   * @public
   */
  init() {
    this._createNotification();
    this._addEventListeners();
  }

  /**
   * Destroy component.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.notification.addEventListener('click', this.listeners.click);
    window.addEventListener('keydown', this.listeners.keyDown);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    if (this.dom.notification && this.dom.notification.parentNode) {
      this.dom.notification.removeEventListener('click', this.listeners.click);
      window.removeEventListener('keydown', this.listeners.keyDown);
      this.dom.notification.parentNode.removeChild(this.dom.notification);
    }
  }

  /**
   * Return notification DOM element.
   * @public
   * @return {HTMLElement}
   */
  getNotification() {
    return this.dom.notification;
  }

  /**
   * Create notification DOM element.
   * @private
   */
  _createNotification() {
    this.dom.notification = document.createElement('div');
    this.dom.notification.classList.add('notification');

    const notificationTopRow = document.createElement('div');
    notificationTopRow.classList.add('top-row');

    const notificationTitle = document.createElement('div');
    notificationTitle.classList.add('title');
    notificationTitle.innerText = this.props.title;
    notificationTopRow.appendChild(notificationTitle);

    const notificationClose = document.createElement('i');
    notificationClose.className = 'icon icon-cross close';
    notificationTopRow.appendChild(notificationClose);

    this.dom.notification.appendChild(notificationTopRow);

    if (this.props.icon) {
      const notificationIcon = document.createElement('i');
      notificationIcon.classList.add('icon', this.props.icon);
      notificationTitle.insertBefore(notificationIcon, notificationTitle.childNodes[0]);
    }

    if(this.props.description) {
      const notificationDescription = document.createElement('div');
      notificationDescription.classList.add('description');
      notificationDescription.innerText = this.props.description;

      this.dom.notification.appendChild(notificationDescription);
    }

    this.dom.close = notificationClose;

    document.body.appendChild(this.dom.notification);

    /**
     * setTimeout is needed for CSS animation to work when creating new elements
     * (10ms for Firefox animation to work properly)
     */
    setTimeout(() => {
      this.dom.notification.classList.add('live');
    }, 10);

    if (this.props.timeout) {
      setTimeout(() => {
        this.destroy();
      }, this.props.timeout);
    }
  }

  /**
   * Handle click on notification.
   * @private
   * @param {Event} evt - Click event.
   * @param {HTMLElement} evt.target - Clicked element.
   */
  _handleClick({target}) {
    if (target !== this.dom.close && this.props.action) {
      this.props.action();
    }
    this.destroy();
  }

  /**
   * Close notification by pressing Escape
   * @private
   * @param {Event} evt - key event.
   */
  _closeOnKeyDown(evt){
    if (evt.key === 'Escape'){
      this._handleClick(this.dom.notification);
    }
  }
}
