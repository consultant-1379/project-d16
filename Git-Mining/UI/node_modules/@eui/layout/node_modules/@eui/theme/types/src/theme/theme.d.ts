export class Theme extends Component {
    /**
     * Change the theme. After 100ms remove the old style. This
     * prevents a flashing of the page when the style changes.
     *
     * @function _changeTheme
     * @param {String} prevTheme - previous theme name
     * @param {String} theme - name of the theme
     * @private
     */
    private _changeTheme;
    /**
     * Fetch alternative theme from an alternative location. This is used to
     * fetch themes which are not the supplied themes of light and dark.
     * Alternative themes are loaded in the head within a style tag. Once added
     * the previous theme is removed.
     *
     * @function _fetchAlternativeTheme
     * @param {String} fontPath - path to the location of alternative font
     * @param {String} themePath - path to the location of alternative CSS
     * @param {String} theme - name of theme to apply
     * @param {String} prevTheme - name of previous theme
     * @private
     */
    private _fetchAlternativeTheme;
    /**
     * @function _replaceVariable
     * @param {String} source - the source string to modify
     * @param {String} variable - the name of the variable to replace
     * @param {String} replace - the value to replace
     */
    _replaceVariable(source: string, variable: string, replace: string): string;
    /**
     * Create a style tag with the id of the theme.
     * This new style tag will serve as a holder
     * for the new theme
     *
     * @function _createEmptyStyleTag
     * @param {String} theme - name of the theme
     * @returns Element
     */
    _createEmptyStyleTag(theme: string): HTMLStyleElement;
    /**
     * Remove the old theme from the head. The old theme is
     * removed after 100ms to avoid a flash of un-styled content
     *
     * @function _removeOldTheme
     * @param {String} oldTheme - name of old theme
     */
    _removeOldTheme(oldTheme: string): void;
    /**
     * Lifecycle callback executed each time the components props are updated
     *
     * @method didChangeProps
     * @param {Map} changedProps - the previous values of the components changed props
     */
    didChangeProps(changedProps: Map<any, any>): void;
    /**
     * Lifecycle callback executed when componments connects for the first time
     *
     * @method didConnect
     */
    didConnect(): void;
}
import { Component } from "@eui/component";
