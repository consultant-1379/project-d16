/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */
/**
 * A decorator used to decorate props in a component.
 * use like...
 *
 * @prop({
 *   attribute: [true|false],
 *   type: ['string'|'number'|'boolean'|'array'|'object'],
 *   default: value, required: [true|false]})
 * propA;
 *
 * @param {Object} options - define the prop.
 * @deprecated
 */
export function prop(options = {}) {
  return (target, name, descriptor) => {
    // Some stuff which is needed to stop babel decorators-legacy from
    // overwriting the property descriptor with a `value` type.
    // See: https://stackoverflow.com/questions/39267780/how-to-disable-defining-class-properties-in-babel-transform-decorators-legacy
    delete descriptor.writable;
    descriptor.get = () => {};
    delete descriptor.initializer;
    target.constructor._propDefs = {
      ...target.constructor._propDefs,
      [name]: options,
    };
  };
}

/**
 * @function registerMixin
 *
 * @param {*} superMixins
 * @param { String } name - name of mixin
 * @returns { Array } mixins
 */
export const registerMixin = (superMixins, name) => {
  const mixins = superMixins ? Array.from(superMixins) : [];
  if (!mixins.includes(name)) {
    mixins.push(name);
  }
  return mixins;
};

/**
 * @function hasMixin
 *
 * @param { Object } Base - the mixin
 * @param { String } name - name of the mixin
 * @returns { Boolean }
 */
export const hasMixin = (Base, name) =>
  Base._mixins !== undefined && Base._mixins.indexOf(name) > -1;
