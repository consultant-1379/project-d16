/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */
import helpers from './utils/helpers.js';
import { registerMixin, hasMixin } from './utils/exports.js';

export default Base => {
  const mixinName = 'StatelessComponentMixin';
  const { eventHandlers, compatUpdated, bubble, microtaskDebounce } = helpers;

  if (hasMixin(Base, mixinName)) {
    console.warn(`Tried to add existing mixin ${mixinName}`);
    return Base;
  }
  return class Stateless extends Base {
    static get _mixins() {
      return registerMixin(super._mixins, mixinName);
    }

    constructor() {
      super();
      this._shadyPrepared = false;
      this._lifecycleDebounced = microtaskDebounce(
        this._executeLifecycle.bind(this),
      );
    }

    connectedCallback() {
      this._executeLifecycle();
      eventHandlers(this.intercepts);
    }

    disconnectedCallback() {
      eventHandlers(this.intercepts, false);
    }

    compatElementUpdated() {
      compatUpdated(this._shadyPrepared, this);
    }

    bubble(name, detail = {}, config = {}) {
      return bubble(this, name, detail, config);
    }

    _executeLifecycle() {
      this.executeRender();
    }

    executeRender() {}

    /**
     * Lifecycle hook
     * Implement this hook in your component if you are interested
     * to know when the component is upgraded.
     * Renderers should call this only once when the shadowRoot is
     * attached and the template is added.
     *
     * Executes only once in the component lifecycle.
     * Initial render has taken place and changes flushed to the DOM.
     * All props are accessible and the shadowRoot is available.
     * This hook gives the ability to check the presence of slotted children.
     *
     * If the component listens for slotchange events on a slot, then this
     * is the place to get their initial state. In Safari browser the
     * component is mutated before the shadowRoot is added which means
     * the slotchange won't fire on first render.
     *
     *
     * @function didUpgrade
     */
    didUpgrade() {}

    /**
     * Define the component as a Custom Element. The optional customName MUST be a valid
     * custom element and contain at least one dash (-).
     *
     * @function register
     * @param { String } customName - name of the component
     */
    static register(customName) {
      if (customName) {
        this.is = customName;
      }
      if (!customElements.get(this.is)) {
        try {
          customElements.define(this.is, this);
        } catch (error) {
          console.error(
            `Failed to register component. "${this.is}" is not a valid component name. Valid component names must include at least one dash (-)`,
          );
        }
      }
    }
  };
};
