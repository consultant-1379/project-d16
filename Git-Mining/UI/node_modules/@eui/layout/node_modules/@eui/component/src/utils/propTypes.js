/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */
export const safeParse = value => {
  try {
    return JSON.parse(value);
  } catch (e) {
    if (e.name === 'SyntaxError') {
      console.warn(`Invalid JSON: '${value}'`);
    }
    return null;
  }
};

export const typeMapping = type => {
  switch (type) {
    case String:
      return {
        coerce: value => (value == null ? null : String(value)),
        serialize: value => (value == null ? null : String(value)),
        deserialize: value => value,
      };

    case Boolean:
      return {
        coerce: value => Boolean(value),
        serialize: value => (value ? '' : null),
        deserialize: value => value != null,
      };

    case Number:
      return {
        /* eslint-disable-next-line no-restricted-globals */
        coerce: value => (value == null || isNaN(value) ? null : Number(value)),
        serialize: value => (value == null ? null : String(value)),
        deserialize: value => (value == null ? null : Number(value)),
      };

    case Object:
      return {
        coerce: value =>
          value == null || typeof value !== 'object' ? null : value,
        serialize: value => (value == null ? null : JSON.stringify(value)),
        deserialize: value => (value == null ? null : safeParse(value)),
      };

    case Array:
      return {
        coerce: value => (Array.isArray(value) ? value : null),
        serialize: value => (value == null ? null : JSON.stringify(value)),
        deserialize: value => (value == null ? null : safeParse(value)),
      };

    default:
      return {
        coerce: value => value,
        serialize: value => value,
        deserialize: value => value,
      };
  }
};
