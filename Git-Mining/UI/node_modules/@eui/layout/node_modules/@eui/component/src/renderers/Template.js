/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */
import { registerMixin, hasMixin } from '../utils/exports.js';

/**
 * @description Adds a simple renderer using static template tags.
 */
export default Base => {
  function getTemplateElement(template, styleText) {
    if (template === undefined) {
      template = '';
    }

    if (typeof template === 'string') {
      const div = document.createElement('div');
      div.innerHTML = `<template id="the-template">${template}</template>`;
      template = div.querySelector('template#the-template');
    }
    const clone = template.content.cloneNode(template, true);

    if (typeof styleText === 'string') {
      const style = document.createElement('style');
      style.appendChild(document.createTextNode(styleText));
      clone.prepend(style);
    }
    return clone;
  }

  const mixinName = 'Template';
  if (hasMixin(Base, mixinName)) {
    console.warn(`Tried to add existing mixin ${mixinName}`);
    return Base;
  }

  return class Template extends Base {
    static get _mixins() {
      return registerMixin(super._mixins, mixinName);
    }

    constructor() {
      super();
      this.attachShadow({
        mode: 'open',
        ...this.shadowRootOptions?.(),
      });
      this._template = getTemplateElement(
        this.constructor.template,
        this.constructor.style,
      );
      this.root.appendChild(this._template);
    }

    executeRender() {
      // call didUpgrade lifecycle callback on the first render...
      if (!this.firstRender) {
        this.firstRender = true;
        this.didUpgrade();
      }
    }

    get root() {
      return this.shadowRoot;
    }

    static getTemplate(id) {
      const selector = id ? `#${id}` : 'template';
      const template =
        document.currentScript.ownerDocument.querySelector(selector) ||
        document._currentScript.ownerDocument.querySelector(selector);

      return template;
    }

    trigger(eventName, options) {
      this.dispatchEvent(
        new CustomEvent(eventName, {
          detail: options || {},
        }),
      );
    }

    find(value, many) {
      if (many) {
        return this.root.querySelectorAll(value);
      }
      return this.root.getElementById(value);
    }
  };
};
