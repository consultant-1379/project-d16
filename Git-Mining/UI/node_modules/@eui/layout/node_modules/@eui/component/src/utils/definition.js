/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */
/**
 * This file provides the @definition decorator which is used to setup the
 * definition of a custom component.
 *
 * Usage example
 * import { definition, APPEND } from 'definition.js';
 *
 * ...
 *
 * @definition('e-my-component', {
 *   style: 'someStyle',
 *   template: 'someTemplate',
 *   templatePosition: APPEND,
 *   props: {
 *     propName: { attribute: true, type: Boolean }
 *   }
 * })
 * class MyComponent extends TemplateComponent {}
 */

/**
 * APPEND - Append the template to the existing markup of the component being extended (if any)
 */
export const APPEND = 1;

/**
 * PREPEND = Prepend the template to the existing markup of the component being extended (if any)
 */
export const PREPEND = 2;

/**
 * Set the template of the component. Setting the optional position of
 * where extended markup will be placed.
 *
 * @function setTemplates
 * @param { Object } target - Component.
 * @param { String } targetTemplate - template form the base component.
 * @param { String } optionTemplate - template form the extended component.
 * @param { String } pos - [PREPEND|APPEND] position fo the extended template.
 */
function setTemplates(
  target,
  targetTemplate = null,
  optionTemplate = null,
  pos = APPEND,
) {
  if (!targetTemplate && !optionTemplate) {
    target.template = targetTemplate;
  } else if (targetTemplate && optionTemplate) {
    if (pos === PREPEND) {
      target.template = `${optionTemplate}${targetTemplate}`;
    } else if (pos === APPEND) {
      target.template = `${targetTemplate}${optionTemplate}`;
    }
  } else if (!targetTemplate && optionTemplate) {
    target.template = optionTemplate;
  }
}

/**
 * Set the style of the component
 *
 * @function setStyles
 * @param {*} target - Component.
 * @param {*} targetStyle - style from the base component.
 * @param {*} optionStyle - style from the extended component.
 */
function setStyles(target, targetStyle = null, optionStyle = null) {
  if (targetStyle && !optionStyle) {
    target.style = targetStyle.toString();
  } else if (targetStyle && optionStyle) {
    target.style = `${targetStyle.toString()}${optionStyle.toString()}`;
  } else if (!targetStyle && optionStyle) {
    target.style = optionStyle.toString();
  }
}

/**
 * A decorator function which sets the decorated Class (target) as a custom component.
 * It allows the specification of the custom name (is),
 * the style and template (options).
 *
 * @function definition
 * @template {String} [K]
 * @param { string } is - custom name of the component.
 * @param { object } [options] - style, template, templatePosition and props of the component.
 * @param { string } [options.style] - CSS style for component
 * @param { string } [options.template] - template markup for component
 * @param { number } [options.templatePosition] - template position for the component,
 * this is used when extending existing Components.
 *
 * @param { Object.<string, {
 *  attribute?: boolean,
 *  type?: (boolean|string|object|Array<any>|number )
 *  default?: (boolean|string|object|Array<any>|number )
 *  required?: boolean
 * }> } [options.props] - the properties for the component
 * @param { object<T> } target - the Class
 */
export const definition =
  (
    is,
    options = {
      style: null,
      template: null,
      templatePosition: null,
      props: null,
    },
  ) =>
  target => {
    target.is = is;
    target._propDefs = { ...target._propDefs, ...options.props };
    target._propDefs.i18n = { attribute: false, type: Object };

    setStyles(target, target.style, options.style);
    setTemplates(
      target,
      target.template,
      options.template,
      options.templatePosition,
    );
  };
