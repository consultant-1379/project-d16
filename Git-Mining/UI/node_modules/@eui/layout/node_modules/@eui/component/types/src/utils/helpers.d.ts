declare namespace _default {
    export { whenComponentsAreDefined };
    export { sym };
    export { microtaskDebounce };
    export { warn };
    export { addClassNames };
    export { prepareTemplate };
    export { bubble };
    export { dashToCamel };
    export { camelToDash };
    export { compatUpdated };
    export { eventHandlers };
    export { getCurrentSystemLocale };
}
export default _default;
/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */
declare function whenComponentsAreDefined(root: any): Promise<any>;
/**
 * @description Use to define keys to avoid cluttering object namespace
 */
declare function sym(description: any): symbol;
/**
 * @description Debounce a 0-arg function into the microtask queue.
 * This ensures that the update will be processed on the tail-end of this task,
 * before the next tick / browser repaint.
 * More info on this approach:
 * https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/
 * https://javascript.info/event-loop
 *
 * @param {Function} fn
 * @return {Function}
 */
declare function microtaskDebounce(fn: Function): Function;
/**
 * @description Warn the developer about improper library usage.
 * @todo: Make only active in dev mode (no-op in production)
 */
declare function warn(message: any): void;
/**
 * Manually add the correct scoped classnames, if ShadyCSS doesn't
 * seem to be doing its job.
 */
declare function addClassNames(customElement: any): void;
/**
 * ShadyCSS prepareTemplate, but check it's not doubling up
 */
declare function prepareTemplate(template: any, name: any): void;
declare function bubble(context: any, name: any, detail?: {}, config?: {}): CustomEvent<{}>;
/**
 * Transform dash-case (HTML) into camelCase (JS)
 * @param {string} input
 * @returns {string}
 */
declare function dashToCamel(input: string): string;
/**
 * Transform camelCase (JS) into dash-case (HTML)
 *
 * @param {string} input
 * @returns {string}
 */
declare function camelToDash(input: string): string;
declare function compatUpdated(shadyPrepared: any, obj: any): void;
declare function eventHandlers(obj: any, add?: boolean): void;
/**
 * @description Gets the global locale override
 * @function getCurrentSystemLocale
 * @returns string or null
 */
declare function getCurrentSystemLocale(): any;
