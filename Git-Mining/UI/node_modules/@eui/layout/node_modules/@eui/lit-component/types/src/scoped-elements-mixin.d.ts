export function ScopedElementsMixin(Base: any): {
    new (): {
        [x: string]: any;
        /**
         * Getter for the instance of the Custom Element Registry.
         * Override this getter if a new instance of the
         * Custom Element Registry is required for every instance of the component
         * that extends Base.
         */
        customElementRegistry: any;
        /**
         * Register a single component to the registry.
         *
         * @function register
         * @param {Object} klass - module of the component to register
         * @param {String} [name] - name of the component to register
         */
        register(klass: any, name?: string): void;
        /**
         * Register multiple components to the registry.
         *
         * @function registerAll
         * @param { Object.<string, Object> } components - name:Module for each component to be registered
         */
        registerAll(components: {
            [x: string]: any;
        }): void;
        /**
         * Get the shadowRoot options. This is called from Base when attaching the
         * shadow to the component. This determines if scoped Custom Element Registry
         * is supported.
         * If it is supported, customElements attribute is set in the shadowRoot,
         * otherwise the shadowRoot is unchanged.
         *
         * @function shadowRootOptions
         * @returns {Object} - { customElements: customElementRegistry } || {}
         */
        shadowRootOptions(): any;
        /**
         * Get the render options. This is called from Base when rendering to
         * the DOM using lit-html's render function. It sets the option of creationScope. This
         * determines the scope lit-html uses to create an element. This value defaults to document.
         * If scoped Custom Element Registry is supported the scope should be the shadowRoot.
         *
         * @function renderOptions
         * @returns {Object} - { creationScope: shadowRoot } || {}
         */
        renderOptions(): any;
        /**
         * Convenience method to perform the imperative creation of elements. If scoped Custom Element Registry
         * is supported, elements are created on the shadowRoot, otherwise they are created on the document.
         *
         * @function createElement
         * @param {String} tagName - name of the element to create.
         * @returns Node
         */
        createElement(tagName: string): any;
    };
    [x: string]: any;
    /**
     * Obtains the component definitions map if specified.
     */
    readonly components: {};
};
