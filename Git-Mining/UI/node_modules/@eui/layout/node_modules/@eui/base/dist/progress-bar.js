import { definition, LitComponent, html } from '@eui/lit-component';

var style = ":host {\n  display: block;\n}\n\n.progress-bar {\n  display: flex;\n  align-items: center;\n}\n\nlabel {\n  display: block;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n.progress-bar .progress-wrapper {\n  flex: 1;\n  height: var(--progress-bar-height, 8px);\n  position: relative;\n}\n.progress-bar progress {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  border: none;\n  width: 100%;\n  height: 100%;\n  background-color: var(--progress-bar-background, #dcdcdc);\n  transition: all 0.2s ease-in-out;\n  position: absolute;\n}\n.progress-bar progress::-moz-progress-bar {\n  background-color: var(--progress-bar-value, #242424);\n  transition: all 0.2s ease-in-out;\n}\n.progress-bar progress.buffer {\n  opacity: 0.3;\n}\n\n/* indeterminate */\n.progress-bar .show-indeterminate {\n  width: 100%;\n  background: none;\n  animation: indeterminateAnimation 1s infinite ease-in-out 1s;\n  transform-origin: 0 0;\n}\n.progress-bar .show-indeterminate progress::-webkit-progress-bar {\n  background: none;\n  animation: indeterminateAnimation 1s infinite ease-in-out 1s;\n  transform-origin: 0 0;\n}\n.progress-bar .show-indeterminate progress::-moz-progress-bar {\n  background: none;\n  animation: indeterminateAnimation 1s infinite ease-in-out 1s;\n  transform-origin: 0 0;\n}\n.progress-bar .value {\n  margin-left: var(--space-small, 4px);\n}\n.progress-bar .unit {\n  color: var(--progress-bar-unit, #6a6a6a);\n}\n\n.progress-bar progress::-webkit-progress-bar {\n  background-color: var(--progress-bar-background, #dcdcdc);\n}\n.progress-bar progress::-webkit-progress-value {\n  background-color: var(--progress-bar-value, #242424);\n  height: var(--progress-bar-height, 8px);\n  width: 100%;\n  transition: all 0.2s ease-in-out;\n}\n/* Thin progress bar*/\n.progress-bar.thin progress {\n  height: var(--progress-bar-height-thin, 4px);\n}\n.progress-bar.thin progress::-webkit-progress-value {\n  height: var(--progress-bar-height-thin, 4px);\n}\n\n/* Progressbar colors */\n.progress-bar.red progress::-webkit-progress-value {\n  background-color: var(--red, #ed0e00);\n}\n.progress-bar.red progress::-moz-progress-bar {\n  background-color: var(--red, #ed0e00);\n}\n.progress-bar.red progress[value] {\n  color: var(--red, #ed0e00);\n}\n.progress-bar.blue progress::-webkit-progress-value {\n  background-color: var(--blue, #1174e6);\n}\n.progress-bar.blue progress::-moz-progress-bar {\n  background-color: var(--blue, #1174e6);\n}\n.progress-bar.blue progress[value] {\n  color: var(--blue, #1174e6);\n}\n.progress-bar.green progress::-webkit-progress-value {\n  background-color: var(--green, #329864);\n}\n.progress-bar.green progress::-moz-progress-bar {\n  background-color: var(--green, #329864);\n}\n.progress-bar.green progress[value] {\n  color: var(--green, #329864);\n}\n.progress-bar.yellow progress::-webkit-progress-value {\n  background-color: var(--yellow, #a08209);\n}\n.progress-bar.yellow progress::-moz-progress-bar {\n  background-color: var(--yellow, #a08209);\n}\n.progress-bar.yellow progress[value] {\n  color: var(--yellow, #a08209);\n}\n.progress-bar.orange progress::-webkit-progress-value {\n  background-color: var(--orange, #d46617);\n}\n.progress-bar.orange progress::-moz-progress-bar {\n  background-color: var(--orange, #d46617);\n}\n.progress-bar.orange progress[value] {\n  color: var(--orange, #d46617);\n}\n.progress-bar.purple progress::-webkit-progress-value {\n  background-color: var(--purple, #a56ebe);\n}\n.progress-bar.purple progress::-moz-progress-bar {\n  background-color: var(--purple, #a56ebe);\n}\n.progress-bar.purple progress[value] {\n  color: var(--purple, #a56ebe);\n}\n.progress-bar.white progress::-webkit-progress-value {\n  background-color: var(--white, #fff);\n}\n.progress-bar.white progress::-moz-progress-bar {\n  background-color: var(--white, #fff);\n}\n.progress-bar.white progress[value] {\n  color: var(--white, #fff);\n}\n.progress-bar.gray progress::-webkit-progress-value {\n  background-color: var(--gray, #878787);\n}\n.progress-bar.gray progress::-moz-progress-bar {\n  background-color: var(--gray, #878787);\n}\n.progress-bar.gray progress[value] {\n  color: var(--gray, #878787);\n}\n\n\n\n@-webkit-keyframes indeterminateAnimation {\n  0% {\n    transform: translateX(0) scaleX(0);\n  }\n  40% {\n    transform: translateX(0) scaleX(1);\n  }\n  100% {\n    transform: translateX(100%) scaleX(0);\n  }\n}\n\n@-moz-keyframes indeterminateAnimation {\n  0% {\n    transform: translateX(0) scaleX(0);\n  }\n  40% {\n    transform: translateX(0) scaleX(1);\n  }\n  100% {\n    transform: translateX(100%) scaleX(0);\n  }\n}\n\n@keyframes indeterminateAnimation {\n  0% {\n    transform: translateX(0) scaleX(0);\n  }\n  40% {\n    transform: translateX(0) scaleX(1);\n  }\n  100% {\n    transform: translateX(100%) scaleX(0);\n  }\n}\n\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */
/**
 * @property {Number} buffer - set buffer value
 * @property {String} label - the label text displayed above the progress
 * @property {Boolean} thin - set the bar size as thin
 * @property {Boolean} unit - display the unit of the value (defaults to %)
 * @property {Number} max - set the maximum progress value
 * @property {Number} min - set the minimum progress value
 * @property {String} color - set the bar color
 * @property {Number} value - set the progress value
 */
class ProgressBar extends LitComponent {
  /**
   * When a prop changes check if the value changed is the bar-width
   *
   * @function didChangeProps
   */
  didChangeProps() {
    if (this.value !== -1 && this.value > this.max) {
      this.value = this.max;
    }
    if (this.value !== -1 && this.value < this.min) {
      this.value = this.min;
    }
  }

  /**
   * Returns the classes that needs to be added on the progress bar
   * @returns {string} - class names required to be on the progress bar
   * @private
   */
  _getProgressBarClasses() {
    const { thin, color } = this;
    const barThin = thin ? ' thin' : '';
    const barColor = color ? ` ${color}` : '';
    const progressBarClass = `progress-bar${barThin}${barColor}`;
    return progressBarClass;
  }

  /**
   * Returns the progress element with min, max, val properties
   * @returns {object} - progress element template
   * @private
   */
  _getProgressElement() {
    const { value, min, max } = this;
    const progressElement =
      value > -1
        ? html` <progress min=${min} max=${max} value="${value}"></progress> `
        : html` <progress min=${min} max=${max}></progress> `;
    return progressElement;
  }

  /**
   * Returns the label element for the progress bar
   * @returns {object} - if label value is set then returns label element template otherwise null
   * @private
   */
  _getLabelElement() {
    const { label } = this;
    const labelElement = label ? html` <label>${label}</label> ` : null;
    return labelElement;
  }

  /**
   * Checks if progress bar needs to enable buffer
   * @returns {boolean} - true/false, buffer is required/not required
   * @private
   */
  _isBufferElementRequired() {
    const { value, buffer } = this;
    return buffer > value && value > -1;
  }

  /**
   * Returns the classes that needs to be added on the progress wrapper
   * @returns {string} - list of class names to be added on progress wrapper
   * @private
   */
  _getProgressWrapperClasses() {
    const progressWrapperClass = 'progress-wrapper';
    const showIndeterminate = this.value < 0 ? 'show-indeterminate' : '';
    const classNames = `${progressWrapperClass} ${showIndeterminate}`;
    return classNames;
  }

  /**
   * Returns the buffer element for the progress bar
   * @returns {object} - if buffer element is required
   * then returns progress element with buffer otherwise null
   * @private
   */
  _getProgressBufferElement() {
    const { buffer, min, max } = this;
    const bufferClass = 'buffer';
    const bufferElement = this._isBufferElementRequired()
      ? html`
          <progress
            class="${bufferClass}"
            min=${min}
            max=${max}
            value="${buffer}"
          ></progress>
        `
      : null;
    return bufferElement;
  }

  /**
   * Returns the value element for the progress bar
   * @return {object} - if value property is valid
   * then returns the value element template otherwise null
   * @private
   */
  _getValueElement() {
    const { value } = this;
    const valueElement =
      value > -1
        ? html`
            <span class="value">${value}</span>
            <span class="unit">${this.unit}</span>
          `
        : null;
    return valueElement;
  }

  /**
   * Render the ProgressBar component. This function is called each time a
   * prop changes.
   */
  render() {
    return html`
      ${this._getLabelElement()}
      <div class="${this._getProgressBarClasses()}">
        <div class="${this._getProgressWrapperClasses()}" >
          ${this._getProgressElement()}
          ${this._getProgressBufferElement()}
        </div>
        ${this._getValueElement()}
        </div>
      </div>`;
  }
}
definition('eui-progress-bar', {
  style,
  props: {
    buffer: { attribute: true, type: Number, default: 0 },
    color: { attribute: true, type: String },
    label: { attribute: true, type: String, default: '' },
    max: { attribute: true, type: Number, default: 100 },
    min: { attribute: true, type: Number, default: 0 },
    thin: { attribute: true, type: Boolean },
    unit: { attribute: true, type: String, default: '%' },
    value: { attribute: true, type: Number, default: -1 },
  },
})(ProgressBar);

export { ProgressBar };
