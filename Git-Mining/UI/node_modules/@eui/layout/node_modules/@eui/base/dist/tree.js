import { definition, LitComponent, classMap, html } from '@eui/lit-component';
import { TreeItem } from './tree-item.js';
import '@eui/theme/icon';
import './checkbox.js';

var style = ":host {\n  display: block;\n}\n\n.tree__ul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  opacity: 1;\n}\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

class Tree extends LitComponent {
  static get components() {
    return {
      'eui-tree-item': TreeItem,
    };
  }

  /**
   * This is used to recursively set all tree items inactive.
   * This is only used when the Tree is setup using data prop.
   *
   * @function deactivateAllItems
   * @param {Object} data - data representing the tree item
   */
  deactivateAllItems(data = this.data) {
    data.forEach(item => {
      if (item.children) {
        item.active = false;
        // deactivate all children...
        this.deactivateAllItems(item.children);
      } else {
        item.active = false;
      }
    });
  }

  /**
   * Handle events bubbled from tree item, process and re-bubble proper event from tree
   *
   * @function handleEvent
   * @param {Event} event - events from the Tree
   */
  handleEvent(event) {
    if (event) {
      event.stopPropagation();
    }

    const { type: eventType } = event;

    if (eventType === 'deactive-all') {
      if (this.data) {
        this.deactivateAllItems();
      } else {
        this.deactivateAll();
      }
      if (this.data) {
        event.detail.itemData.active = true;
        this.data = [...this.data];
      } else {
        event.detail.active = true;
      }
    }

    // Event handling for calculating the selection status of three.
    if (eventType === 'eui-treeItem:select') {
      if (this.multiSelect) {
        const treeItems = this.getTreeItems();
        let pos = treeItems.length - 1;
        while (pos >= 0) {
          const curItem = treeItems[pos];
          requestAnimationFrame(() => curItem.calculateCheckStatus());
          pos -= 1;
        }
      }

      this._bubbleEvent('eui-tree:select', event.detail);
    }

    if (eventType === 'eui-treeItem:expand') {
      this._bubbleEvent('eui-tree:expand', event.detail);
    }
  }

  /**
   * Bubble event from Tree
   *
   * @function _bubbleEvent
   * @param eventName - event name
   * @param eventDetail - event details go with the event
   * @private
   */
  _bubbleEvent(eventName, eventDetail) {
    const {
      innerText: label,
      itemData: { data },
      open,
      checked,
    } = eventDetail;

    if (eventName === 'eui-treeItem:expand') {
      this.bubble(eventName, { label, data, open });
    } else {
      const selected = this.multiSelect ? checked : true;
      this.bubble(eventName, { label, data, selected });
    }
  }

  /**
   * This function is used to set the active prop of the parent of the active tree item.
   * It is called recursively starting at the top most level and ending
   * when it reaches the actual active tree item.
   *
   * @function _setActive
   * @param {Object} data - data representing tree item.
   * @private
   */
  _setActive(data = this.data) {
    let foundActivityAtIndex = 0;
    const foundItem = data.some((item, index) => {
      const dataString = JSON.stringify(item);
      const found = dataString.includes('"active":true');
      if (found) {
        foundActivityAtIndex = index;
      }
      return found;
    });
    if (
      data[foundActivityAtIndex] &&
      data[foundActivityAtIndex].children &&
      foundItem
    ) {
      data[foundActivityAtIndex].active = true;
      this._setActive(data[foundActivityAtIndex].children);
    }
  }

  /**
   * Deactivate all tree-items without triggering event.
   *
   * @function deactivateAll
   * @public
   */
  deactivateAll = () => {
    const treeItems = this.getTreeItems();
    // eslint-disable-next-line no-return-assign
    treeItems.forEach(treeItem => (treeItem.active = false));
  };

  /**
   * Get the currently active tree-item.
   *
   * @function getSelected
   * @public
   * @returns [NodeElement] - array of active tree-items
   */
  getSelected = () => {
    const treeItems = this.getTreeItems();
    return this.multiSelect
      ? treeItems.filter(item => item.checked)
      : treeItems.filter(item => item.active);
  };

  /**
   * ClassMap for tree items
   */
  getTreeItemClass() {
    return classMap({
      'tree--navigation': this.navigation,
      'tree-item': true,
    });
  }

  /**
   * Create the tree component based on data entered via the data prop.
   *
   * @function _makeTreeFromData
   * @param {Object} treeItem - tree item object
   * @private
   */
  _makeTreeFromData(treeItem) {
    return html`
      <eui-tree-item
        class="${this.getTreeItemClass()}"
        ?open="${treeItem.open}"
        ?active="${treeItem.active}"
        .itemData=${treeItem}
        ._multiSelect=${this.multiSelect}
      >
        ${treeItem.label}
        ${treeItem.children &&
        treeItem.children.map(child => this._makeTreeFromData(child))}
      </eui-tree-item>
    `;
  }

  didUpgrade() {
    if (this.navigation) {
      setTimeout(() => {
        const currentTreeItems = this.querySelectorAll('.tree-item');
        currentTreeItems.forEach(i => i.classList.add('tree--navigation'));
      }, 0);
    }
  }

  /**
   * Hook into the changed props. If data is changed it must be determined if
   * the active tree-item has a parent and if so that too should be set active.
   * Once all parents are found and set active = true the data is mutated.
   *
   * @function didChangeProps
   * @param {Map} changedProps - changed props
   */
  didChangeProps(changedProps) {
    if (
      changedProps.has('data') &&
      Array.isArray(this.data) &&
      this.data.length
    ) {
      // need to set all parents active = true.
      this._setActive();
      // mutate the data...
      this.data = [...this.data];
    }
    if (changedProps.has('navigation')) {
      const currentTreeItems = this.getTreeItems();
      if (this.navigation) {
        currentTreeItems.forEach(i => i.classList.add('tree--navigation'));
      } else {
        currentTreeItems.forEach(i => i.classList.remove('tree--navigation'));
      }
    }

    if (changedProps.has('multiSelect')) {
      const treeItems = this.getTreeItems();
      // eslint-disable-next-line no-restricted-syntax
      for (const item of treeItems) {
        item.active = false;
        item._multiSelect = this.multiSelect;
      }
    }
  }

  /**
   * Get tree items based on tree structure
   */
  getTreeItems() {
    return this.data
      ? [...this.shadowRoot.querySelectorAll('.tree-item')]
      : [...this.querySelectorAll('.tree-item')];
  }

  /**
   * Render the tree component. This function is called each time a
   * prop changes.
   */
  render() {
    return html`
      <div
        class="tree"
        @deactive-all=${this}
        @eui-treeItem:select=${this}
        @eui-treeItem:expand=${this}
      >
        <ul class="tree__ul">
          ${!this.data
            ? html`<slot></slot>`
            : this.data.map(treeItem => this._makeTreeFromData(treeItem))}
        </ul>
      </div>
    `;
  }
}

definition('eui-tree', {
  style,
  props: {
    data: { type: Array },
    navigation: { attribute: true, type: Boolean },
    multiSelect: { attribute: true, type: Boolean, default: false },
  },
})(Tree);

export { Tree };
