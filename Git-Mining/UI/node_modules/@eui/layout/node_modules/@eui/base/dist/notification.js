import { definition, LitComponent, html } from '@eui/lit-component';
import { Icon } from '@eui/theme/icon';

var style = ":host {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  right: -599px;\n  z-index: 100;\n  padding: 12.5px 16px;\n  width: 100%;\n  max-width: 350px;\n  color: var(--text, #242424);\n  background-color: var(--notification-background, #FFF);\n  border: 1px solid var(--notification-border, #878787);\n  box-shadow: 0 2px 16px 0 var(--notification-shadow-color, rgba(0, 0, 0, 0.1));\n  transition: right 0.5s ease-in-out;\n}\n\n:host(.move:not([static])) {\n  animation-name: notification-slide;\n  animation-duration: 500ms;\n}\n\n@keyframes notification-slide {\n  from {right: -599px;}\n  to {right: 16px;}\n}\n\n:host(.move) {\n  right: 16px;\n}\n\n:host(:hover) {\n  border-color: var(--notification-hover, #6A6A6A);\n  cursor: pointer;\n}\n\n:host([static]) {\n  position: relative;\n  top: auto;\n  right: auto;\n  display: block;\n}\n\n.notification .description-slot,\n.notification .description-prop {\n  margin-top: var(--space-large, 16px);\n  color: var(--text, #242424);\n  display: flex;\n  line-height: 1.5;\n}\n\n.notification .description .actions .btn {\n  margin-bottom: 6px;\n  width: 100%;\n  min-width: 80px;\n  margin-right: 0;\n}\n\n.notification .top-row {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.notification .top-row .status {\n  display: inline-block;\n}\n\n.notification .top-row .status::before {\n  font-family: 'Ericsson Icons' !important;\n  margin-right: var(--space-large, 16px);\n  vertical-align: middle;\n  font-size: 16px;\n}\n\n.notification .top-row .title {\n  flex: 1;\n  line-height: 1.5;\n}\n\n@media --tablet {\n  .notification {\n    top: 64px;\n    width: 380px;\n  }\n\n  .notification .live {\n    right: 16px;\n  }\n}\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

/**
 * @property {Number} timeout - determines the time until the notification disappears
 * @property {String} description - text only description text
 */
class Notification extends LitComponent {
  static get components() {
    return {
      'eui-icon': Icon,
    };
  }

  /**
   * Notification constructor.
   */
  constructor() {
    super();
    this.start = 0;
    this.remaining = 0;
    this._wrapper = document.querySelector('#notifications-column');
    if (!this._wrapper) {
      this._addWrapperToDOM();
    }
  }

  /**
   * Creates a div (which will be the parent element for all
   * notifications) and attaches it to the DOM
   */
  _addWrapperToDOM = () => {
    const div = document.createElement('div');
    div.id = 'notifications-column';
    div.style.width = '400px';
    div.style.position = 'absolute';
    div.style.top = '59px';
    div.style.right = '16px';
    div.style.display = 'flex';
    div.style.flexDirection = 'column';
    div.style.gap = '8px';
    div.style.alignItems = 'flex-end';
    div.style.overflowX = 'hidden';
    this._wrapper = div;
    document.body.appendChild(this._wrapper);
  };

  /**
   * Array of timers one from the timeout prop and the other to control
   * the addition of the move class (animation)
   */
  _timers = [];

  /**
   * Clear and close all timers in notification
   */
  _clearTimers() {
    this._timers.forEach(timer => {
      clearTimeout(timer);
    });
    this._timers = [];
  }

  /**
   * Close notification via button
   */
  _closeNotification = event => {
    this._clearTimers();

    if (event) {
      event.stopPropagation();
    }

    this.remove();
  };

  /**
   * Pause the timer
   */
  pause() {
    if (this.start) {
      this._clearTimers();
      this.remaining -= Date.now() - this.start;
    }
  }

  /**
   * Resume a paused timer
   */
  resume() {
    this.start = Date.now();
    this._timers.push(
      setTimeout(() => {
        this._closeNotification();
      }, this.remaining),
    );
  }

  /**
   * Hide description if slot is empty
   */
  _hideDescription = () => {
    const hideDescription = !this.querySelector('[slot="description"]');
    if (hideDescription) {
      this.shadowRoot.querySelector('.description-slot').remove();
    }
  };

  /**
   * Add current notification object in dom
   */
  showNotification() {
    this.start = Date.now();
    this._wrapper.appendChild(this);
  }

  didUpgrade() {
    if (this.timeout) {
      this.remaining = this.timeout;

      this._timers.push(
        setTimeout(() => {
          this._closeNotification();
        }, this.timeout),
      );

      this.addEventListener('mouseover', () => {
        this.pause();
      });

      this.addEventListener('mouseout', () => {
        this.resume();
      });
    }
  }

  /**
   * Hook into the lifecycle callback to trigger the change event when the
   * on prop is changed.
   *
   * @function didChangeProps
   * @param {Map} changedProps - previous values of the changed props
   */
  didChangeProps(changedProps) {
    if (changedProps.has('timeout') && this.timeout) {
      this._timers.push(
        setTimeout(() => {
          this._closeNotification();
        }, this.timeout),
      );
    }
  }

  /**
   * Hook into the lifecycle callback to trigger the notification to
   * animate into view as soon as it's added to the DOM
   *
   * @function didConnect
   */
  didConnect() {
    this._timers.push(
      setTimeout(() => {
        this.classList.add('move');
      }, 100),
    );
  }

  didRender() {
    this._timers.push(
      setTimeout(() => {
        this._hideDescription();
      }),
    );
  }

  didDisconnect() {
    this._clearTimers();
  }

  _renderDescriptionFromProp() {
    return this.description
      ? html` <div class="description-prop">${this.description}</div> `
      : null;
  }

  _renderDescriptionFromSlot() {
    return html`
      <div class="description-slot">
        <slot name="description"></slot>
      </div>
    `;
  }

  /**
   * Render the notification component. This function is called each time a
   * prop changes.
   */
  render() {
    return html`
      <div class="notification">
        <div class="top-row">
          <div class="title">
            <slot></slot>
          </div>
          <eui-icon
            @click=${() => this._closeNotification()}
            name="cross"
          ></eui-icon>
        </div>
        ${this._renderDescriptionFromProp()}
        ${this._renderDescriptionFromSlot()}
      </div>
    `;
  }
}

definition('eui-notification', {
  style,
  props: {
    timeout: { attribute: true, type: Number },
    description: { attribute: true, type: String },
  },
})(Notification);

export { Notification };
