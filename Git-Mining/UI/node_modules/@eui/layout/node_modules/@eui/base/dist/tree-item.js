import { definition, LitComponent, html } from '@eui/lit-component';
import { Icon } from '@eui/theme/icon';
import { Checkbox } from './checkbox.js';

var style = ":host {\n  display: block;\n  font-family: var(--font-main, 'Ericsson Hilda', 'Helvetica');\n}\n\n:host(.tree--navigation) .tree__item__span {\n  padding: 12px 0 12px var(--tree-item-left-padding, 0);\n}\n\n.tree__item__default__slot {\n  display: block;\n  flex: auto;\n}\n\n.tree__item__ul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  opacity: 1;\n}\n\n.tree__item__span {\n  padding: 6px 0 6px var(--tree-item-left-padding, 0);\n  display: flex;\n  align-items: center;\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -ms-user-select: none;\n}\n\n.tree__item__span--navigation {\n  padding: 12px 0 12px var(--tree-item-left-padding, 0);\n}\n\n.tree__item__span:hover {\n  background: var(--tree-hover, #dcdcdc);\n  cursor: pointer;\n}\n\n.tree__item__span__branch--closed ~ .tree__item__ul {\n  height: 0;\n  opacity: 0;\n  visibility: collapse;\n  padding-bottom: 0;\n  display: none;\n}\n\n.tree__item__span__branch--open .icon,\n.tree__item__span__branch--closed .icon {\n  visibility: visible;\n}\n\n.icon {\n  flex: none;\n  padding-left: 9px;\n  margin-right: 6px;\n  color: var(--text, #242424);\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.tree__item__span__leaf--active,\n.tree__item__span__leaf--active:hover {\n  background: var(--blue, #1174e6);\n  color: var(--white, #fff);\n}\n\n.tree__item__span__branch--open.tree__item__span__branch--active,\n.tree__item__span__branch--open.tree__item__span__branch--active:hover {\n  font-weight: 700;\n}\n\n.tree__item__span__branch--closed.tree__item__span__branch--active,\n.tree__item__span__branch--closed.tree__item__span__branch--active:hover {\n  background: var(--blue, #1174e6);\n  color: var(--white, #fff);\n}\n\n.tree__item__span__branch--closed.tree__item__span__branch--active .icon,\n.tree__item__span__branch--closed.tree__item__span__branch--active:hover .icon {\n  --icon-color: var(--white, #fff);\n}\n\n.tree__item__span__branch--closed.tree__item__span__branch--active::before {\n  color: var(--white, #fff);\n}\n\n.tree__item__span .icon.right-align {\n  float: right;\n}\n\n.tree__item__span .icon.right-align::before {\n  vertical-align: inherit;\n  margin-left: 8px;\n}\n\n.tree__item__span .icon::before {\n  vertical-align: middle;\n  margin-right: 8px;\n}\n\n.tree__item__span .icon ~ .tree__item__span {\n  padding-left: 12px;\n}\n\n.tree__item__span:active,\n.tree__item__span:focus {\n  outline: 1px solid var(--purple, #a56ebe);\n  outline-offset: -1px;\n}\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

/**
 * @property {Boolean} active - true/false sets the tree item active/inactive.
 * @property {Boolean} hasLeaves - this is used to set the tree-item as a branch with children.
 * @property {Object} itemData - holds a data representation of the tree-item.
 * @property {Number} level - the level of nesting [0, 1, 2, 3 ... ]
 * @property {Boolean} open - true/false opens/closes a nested tree
 * @property {Boolean} checked: - true/false set the  check state of tree item,
 * @property {Boolean} indeterminate: true/false set the indeterminate state of tree item,
 */
class TreeItem extends LitComponent {
  static get components() {
    return {
      'eui-checkbox': Checkbox,
      'eui-icon': Icon,
    };
  }

  didConnect() {
    this.classList.add('tree-item');
    if (this.parentNode.classList.contains('tree-item')) {
      this.parentNode.hasLeaves = true;
      this.slot = 'item-slot';
      this.level = this.parentNode.level + 1;
      this.style.setProperty('--tree-item-left-padding', `${this.level}em`);
    }
  }

  /**
   * Called each time a prop changes.
   * set the activity state of the tree-item. If the new active state
   * (this.active) is true, then look for it's parent to also set it active.
   *
   * @function didChangeProps
   * @param {Object} prev - previous state of the component
   */
  didChangeProps(changedProps) {
    if (
      changedProps.has('active') &&
      this.active &&
      !changedProps.has('itemData')
    ) {
      let currParentNode = this.parentNode;
      while (currParentNode && currParentNode.classList.contains('tree-item')) {
        currParentNode.active = true;
        currParentNode = currParentNode.parentNode;
      }
    }
  }

  /**
   * Calculate the check status based on all the child tree items.
   */
  calculateCheckStatus() {
    const treeItems = [...this.querySelectorAll('.tree-item')];
    const checkedItemsCount = treeItems.filter(item => item.checked).length;
    const checkbox = this.shadowRoot.querySelector('#tree-item-checkbox');
    if (this.hasLeaves) {
      if (checkedItemsCount === 0) {
        this.checked = false;
        this.indeterminate = false;
        checkbox.checked = false;
        checkbox.indeterminate = false;
      } else if (
        checkedItemsCount > 0 &&
        checkedItemsCount < treeItems.length
      ) {
        this.checked = false;
        this.indeterminate = true;
        checkbox.checked = false;
        checkbox.indeterminate = true;
      } else {
        this.checked = true;
        this.indeterminate = false;
        checkbox.checked = true;
        checkbox.indeterminate = false;
      }
    }
  }

  /**
   * Set the status of all the child items of current node
   * @param { Boolean } the status to be set
   * @param { Boolean } is setting the status of child items
   */
  setStatus(checkStatus, isChild) {
    // Just set the status of child items,
    // the parent item status should be calculated from child items.
    const treeItems = [...this.querySelectorAll('.tree-item')];
    if (isChild) {
      this.checked = checkStatus;
      this.indeterminate = false;
    }
    treeItems.forEach(item => item.setStatus(checkStatus, true));
  }

  /**
   * Move all instances of <eui-base-v[version]-tree-item> to the item-slot
   *
   * @function _moveToItemSlot
   * @private
   */
  _moveToItemSlot() {
    const items = this.children;
    for (let i = 0; i < items.length; i += 1) {
      if (items[i].classList.contains('tree-item')) {
        items[i].slot = 'item-slot';
        items[i].level = this.level + 1;
        this.hasLeaves = true;
      }
    }
    this.style.setProperty('--tree-item-left-padding', `${this.level}em`);
  }

  /**
   * Handler for different events in tree item elements
   *
   * @function handleEvent
   * @event eui-treeItem:select - triggered each time a tree-item is selected
   * @event eui-treeItem:expand - triggered each time a tree-item is expanded
   */
  handleEvent(event) {
    if (event.target.id === 'tree-chevron' && event.type === 'click') {
      event.stopPropagation();
      this.open = !this.open;
      this.itemData.open = this.open;

      this.bubble('eui-treeItem:expand', this);
    } else if (event.target.id === 'tree-item-checkbox') {
      // Clicking on the label or checkbox will un/select the item.
      if (this.hasLeaves) {
        const statusToSet = !this.checked && !this.indeterminate;
        this.setStatus(statusToSet);
        this.checked = statusToSet;
      } else {
        this.checked = !this.checked;
        this.setStatus(this.checked);
      }

      this.bubble('eui-treeItem:select', this);
    } else if (event.target.id !== 'tree-chevron' && event.type === 'click') {
      if (this.hasLeaves) {
        this.open = !this.open;
        this.itemData.open = this.open;

        this.bubble('eui-treeItem:expand', this);
      } else if (this._multiSelect) {
        // If it is the leaf node, select the item.
        this.checked = !this.checked;
        this.setStatus(this.checked);

        this.bubble('eui-treeItem:select', this);
      } else if (this.active !== undefined && this.active === false) {
        // This event is totally internal and won't be used by outside,
        // it will be handled by Tree and followed event eui-tree:select will be bubbled by tree.
        this.bubble('deactive-all', this);

        this.bubble('eui-treeItem:select', this);
      }
    }
    return null;
  }

  /**
   * Create the classList set to style the span element
   *
   * @function _updateClassList
   * @private
   */
  _updateClassList() {
    let classList = 'tree__item__span';

    if (this.hasLeaves) {
      classList += ' tree__item__span__branch';
      if (this.open) {
        classList += ' tree__item__span__branch--open';
      } else {
        classList += ' tree__item__span__branch--closed';
      }
      if (this.active) {
        classList += ' tree__item__span__branch--active';
      }
    } else {
      classList += ' tree__item__span__leaf';
      if (this.active) {
        classList += ' tree__item__span__leaf--active';
      }
    }
    return classList;
  }

  /**
   * Return the slot to allow default tree items to be added.
   * Implement this function in custom tree items in order to add custom markup.
   *
   * @function treeItemContents
   * @public
   */
  treeItemContents() {
    return html` <slot class="tree__item__default__slot"></slot> `;
  }

  /**
   * Return the tree item content depending on tree's multi-select status.
   */
  getTreeItemContent() {
    this._multiSelect =
      this._multiSelect ||
      this.parentNode.multiSelect ||
      this.parentNode._multiSelect;
    return this._multiSelect
      ? html`
          <eui-checkbox
            id="tree-item-checkbox"
            ?checked=${this.checked}
            ?indeterminate=${this.indeterminate}
          >
          </eui-checkbox>
          ${this.treeItemContents()}
        `
      : this.treeItemContents();
  }

  /**
   * Render the <e-tree-item> component. This function is called each time a
   * prop changes.
   */
  render() {
    return html`
      <li class="tree__item">
        <span class="${this._updateClassList()}" @click=${this}>
          <eui-icon
            id="tree-chevron"
            @click=${this}
            class="icon"
            name=${this.open ? 'chevron-down' : 'chevron-right'}
            size="14px"
          >
          </eui-icon>
          ${this.getTreeItemContent()} ${this.data ? this.data.label : ''}
        </span>
        <ul class="tree__item__ul">
          <slot name="item-slot"></slot>
        </ul>
      </li>
    `;
  }
}

definition('eui-tree-item', {
  style,
  props: {
    active: { attribute: true, type: Boolean },
    hasLeaves: { type: Boolean },
    itemData: { type: Object, default: { active: false } },
    level: { type: Number, default: 0 },
    open: { attribute: true, type: Boolean },
    checked: { attribute: true, type: Boolean },
    indeterminate: { attribute: true, type: Boolean },
    _multiSelect: { type: Boolean },
  },
})(TreeItem);

export { TreeItem };
