import { definition, LitComponent, html, ifDefined, nothing } from '@eui/lit-component';
import { Icon } from '@eui/theme/icon';
import { Tooltip } from './tooltip.js';

var style = "/* style goes here */\n:host{\n  display: inline-block;\n  box-sizing: border-box;\n}\n\neui-icon {\n  cursor: pointer;\n  opacity: 0.7;\n}\n\neui-icon:hover {\n  opacity: 1;\n}\n\neui-tooltip[visible=\"always\"] eui-icon{\n  opacity: 1;\n}\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

/**
 * @property {String} message - Message for the info popup.
 * @property {String} position - position of the info popup.
 * @property {String} icon - name of the icon to add to the info popup.
 */
class InfoPopup extends LitComponent {
  static get components() {
    return {
      'eui-tooltip': Tooltip,
      'eui-icon': Icon,
    };
  }

  /**
   * handle click and mouseup events.
   * make info pop up visible.Add event listener (mouseup) to the document to detect
   * if the user clicks outside of the info pop up.
   * make info popup hidden. Remove event listener (mouseup) from the
   * document when the info popup is no longer visible.
   * @function handleEvent
   * @param {Event} event - event Object
   */

  handleEvent(event) {
    event.stopPropagation();

    if (event.type === 'click') {
      this._visible = this._visible === 'always' ? 'never' : 'always';
      if (this._visible === 'always') {
        document.addEventListener('mouseup', this);
      }
    }

    if (event.type === 'mouseup') {
      const hideDropdown = () => {
        this._visible = 'never';
        document.removeEventListener('mouseup', this);
      };

      if (this._visible === 'always') {
        try {
          if (event.path.indexOf(this) === -1) {
            hideDropdown();
          }
        } catch (error) {
          if (!this.contains(event.target)) {
            hideDropdown();
          }
        }
      }
    }
  }

  /**
   * Render the info-popup component. This function is called each time a
   * prop changes.
   */

  render() {
    return html`
      <eui-tooltip
        id="tooltip"
        @click=${this}
        message=${ifDefined(this.message)}
        position=${this.position}
        visible=${this._visible}
      >
        ${!this.message
          ? html`<div slot="message"><slot></slot></div>`
          : nothing}
        <eui-icon name=${this.icon} @click=${this}></eui-icon>
      </eui-tooltip>
    `;
  }
}

definition('eui-info-popup', {
  style,
  props: {
    message: { attribute: true, type: String },
    position: { attribute: true, type: String, default: 'right' },
    _visible: { type: String, default: 'never' },
    icon: { attribute: true, type: String, default: 'info' },
  },
})(InfoPopup);

export { InfoPopup };
