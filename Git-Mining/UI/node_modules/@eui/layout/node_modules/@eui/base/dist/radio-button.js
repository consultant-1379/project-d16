import { definition, LitComponent, html } from '@eui/lit-component';

var style = ":host {\n  box-sizing: border-box;\n  display: flex;\n  font-family: var(--font-main, 'Ericsson Hilda', 'Helvetica');\n  padding: 3px 0;\n  vertical-align: sub;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  cursor: pointer;\n  --radio-stroke: var(--radio-border, #878787);\n  --radio-fill : var(--radio-background, #fff);\n}\n\n:host([disabled]) {\n  cursor: not-allowed;\n}\n\n.wrapper {\n  display: contents;;\n}\n\n.radiobutton__input {\n  -webkit-user-select: none;\n  user-select: none;\n  position: absolute;\n  opacity: 0;\n  height: 0;\n  width: 0;\n  outline: 0;\n}\n\n.radiobutton__label{\n  cursor: pointer;\n}\n\n:host(:hover) {\n  cursor: pointer;\n  --radio-stroke: var(--radio-border-hover, #6a6a6a);\n}\n\n.radiobutton__svg {\n  margin-right: var(--space-small, 4px);\n}\n\n:host([disabled]) {\n  opacity: .4;\n  pointer-events: none;\n  cursor: default;\n}\n\n:host([checked]) {\n  --radio-stroke: var(--radio-border, #878787);\n  --dot-fill: var(--radio-checked, #1174e6);\n}\n\n:host([checked]:hover) {\n  --radio-stroke: var(--radio-border-hover, #6a6a6a);\n  --dot-fill: var(--radio-checked-hover, #0069c2);\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n:host(:focus) .radiobutton__svg {\n  outline: 1px solid var(--purple, #a56ebe);\n  outline-offset: 1px;\n}";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

let count = 0;
/**
 * @property {Boolean} checked - true sets the radio button checked
 * @property {Boolean} disabled - disables the radio button
 * @property {String} group - the group name of the radio button (required)
 * @property {Boolean} menuItem - used to inform the checkbox that it is
 * @property {String} name - the name of the radio button (required)
 */
class RadioButton extends LitComponent {
  constructor() {
    super();
    this.addEventListener('click', event => {
      event.stopPropagation();
      if (!this.disabled) {
        this.checked = true;
      }
    });
  }

  didConnect() {
    if (!this.name) {
      this.name = `rb_generated_${(count += 1)}`;
    }
  }

  /**
   * Component received props. Determine if the checked state has changed.
   * If it is changed from false to true, then un-check all other radio buttons on the same group.
   *
   * @function didChangeProps
   * @param {Map} changedProps -  previous values of the changed props
   */
  didChangeProps(changedProps) {
    if (changedProps.has('checked') && changedProps.get('checked') === false) {
      const radioButtons = this.parentNode.querySelectorAll('eui-radio-button');
      for (let i = 0; i < radioButtons.length; i += 1) {
        if (
          radioButtons[i].group === this.group &&
          radioButtons[i].name !== this.name &&
          radioButtons[i].checked === true
        ) {
          radioButtons[i].checked = false;
        }
      }
    }
    if (changedProps.has('checked') && this.checked) {
      this.bubble('change', {
        name: this.name,
        value: this.value,
        group: this.group,
        label: this.value,
        checked: this.checked,
      });
    }
  }

  /**
   * @function _handleChange
   * @param {MouseEvent} event - click event
   * @private
   */
  _handleChange = event => {
    event.stopPropagation();
    if (!this.disabled) {
      this.checked = true;
    }
  };

  /**
   * Get the value of the radio button.
   */
  get value() {
    return this.textContent.trim();
  }

  /**
   * Set the value of the radio button.
   */
  set value(value) {
    this.textContent = value.trim();
  }

  /**
   * Render the radio-button component. This function is called each time a
   * prop changes.
   */
  render() {
    return html`
      <div class="wrapper">
        <input
          class="radiobutton__input"
          type="radio"
          id="${this.name}"
          name="${this.group}"
          ?checked="${this.checked}"
          ?disabled="${this.disabled}"
          @change="${this._handleChange}"
        />
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 16 16"
          @click="${this._handleChange}"
          class="radiobutton__svg"
        >
          <g fill="none" fill-rule="evenodd">
            <circle
              cx="8"
              cy="8"
              r="5.5"
              fill="var(--radio-fill)"
              stroke="var(--radio-stroke)"
            />
            <circle cx="8" cy="8" r="3" fill="var(--dot-fill)" />
          </g>
        </svg>
        <label class="radiobutton__label" @click="${this._handleChange}">
          <slot></slot>
        </label>
      </div>
    `;
  }
}
definition('eui-radio-button', {
  style,
  props: {
    checked: { attribute: true, type: Boolean },
    disabled: { attribute: true, type: Boolean },
    group: { attribute: true, type: String, required: true },
    menuItem: { type: Boolean },
    name: { attribute: true, type: String, required: true },
  },
})(RadioButton);

export { RadioButton };
