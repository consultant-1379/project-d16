import { definition, LitComponent, html, ifDefined } from '@eui/lit-component';
import { Icon } from '@eui/theme/icon';

/**
 * @file Module to create Spinner component.
 */

/**
 * Class representing a spinner.
 */
class Spinner$1 {

  /**
   * Setup spinner properties.
   * @param {HTMLElement} element - The DOM element of spinner.
   */
  constructor(element) {
    this.dom = {
      spinner: element,
      controls: element.querySelectorAll('.controls > .icon'),
      max: element.querySelector('input').getAttribute('max') || Number.MAX_VALUE,
      min: element.querySelector('input').getAttribute('min') || -Number.MAX_VALUE,
      step: element.querySelector('input').getAttribute('step') || 1,
      input: element.querySelector('input')
    };

    this.type = element.dataset.type;

    this.listeners = {
      increaseValue: () => this._increaseValue(),
      decreaseValue: () => this._decreaseValue(),
      setCorrectFormat: () => this._setCorrectFormat(),
      controlsKeyDown: (evt) => this._keyActions(evt)
    };
  }

  /**
   * Initialize spinner.
   * @public
   */
  init() {
    this._setCorrectFormat();
    this._addEventListeners();
  }

  /**
   * Destroy spinner and associated events.
   * @public
   */
  destroy() {
    this._removeEventListeners();
  }

  /**
   * Add event listeners.
   * @private
   */
  _addEventListeners() {
    this.dom.controls[1].addEventListener('click', this.listeners.increaseValue);
    this.dom.controls[0].addEventListener('click', this.listeners.decreaseValue);
    this.dom.input.addEventListener('change', this.listeners.setCorrectFormat);
    // this.dom.input.addEventListener('keyup', this.listeners.setCorrectFormat);
    this.dom.controls[0].addEventListener('keydown', this.listeners.controlsKeyDown);
    this.dom.controls[1].addEventListener('keydown', this.listeners.controlsKeyDown);
  }

  /**
   * Remove event listeners.
   * @private
   */
  _removeEventListeners() {
    this.dom.controls[1].removeEventListener('click', this.listeners.increaseValue);
    this.dom.controls[0].removeEventListener('click', this.listeners.decreaseValue);
    this.dom.input.removeEventListener('change', this.listeners.setCorrectFormat);
    // this.dom.input.removeEventListener('keyup', this.listeners.setCorrectFormat);
    this.dom.controls[0].removeEventListener('keydown', this.listeners.controlsKeyDown);
    this.dom.controls[1].removeEventListener('keydown', this.listeners.controlsKeyDown);
  }

  /**
   * Set correct state.
   * @private
   */
  _setCorrectState() {
    const input = this.dom.spinner.querySelector('input');

    this.dom.controls[0].classList.remove('disabled');
    this.dom.controls[1].classList.remove('disabled');

    if (
      this.dom.max !== Number.MAX_VALUE
      && parseInt(input.value, 10) === parseInt(this.dom.max, 10)) {
      this.dom.controls[1].classList.add('disabled');
    }

    if (
      this.dom.min !== -Number.MAX_VALUE
      && parseInt(input.value, 10) === parseInt(this.dom.min, 10)) {
      this.dom.controls[0].classList.add('disabled');
    }
  }

  /**
   * Set correct format.
   * @private
   */
  _setCorrectFormat() {
    const input = this.dom.spinner.querySelector('input');

    if (!isNaN(parseInt(input.value, 10))) {
      if (parseInt(input.value, 10) > this.dom.max) {
        input.value = this.dom.max;
        this.dom.input.dispatchEvent(new Event('change'));
      }
      if (parseInt(input.value, 10) < this.dom.min) {
        input.value = this.dom.min;
        this.dom.input.dispatchEvent(new Event('change'));
      }
    } else {
      // not a number
      input.value = this.dom.min;
      this.dom.input.dispatchEvent(new Event('change'));
    }

    this._setCorrectState();
  }

  /**
   * Increase value.
   * @private
   */
  _increaseValue() {
    const input = this.dom.spinner.querySelector('input');
    if (parseInt(input.value, 10) < this.dom.max) {
      input.value = parseInt(input.value, 10) + parseInt(this.dom.step, 10);
    }

    this._setCorrectFormat();

    this.dom.input.dispatchEvent(new Event('change'));
  }

  /**
   * Decrease value.
   * @private
   */
  _decreaseValue() {
    const input = this.dom.spinner.querySelector('input');
    if (parseInt(input.value, 10) > this.dom.min) {
      input.value = parseInt(input.value, 10) - parseInt(this.dom.step, 10);
    }

    this._setCorrectFormat();

    this.dom.input.dispatchEvent(new Event('change'));
  }

  /**
   * Key actions for controls
   * @private
   * @param {Event} evt - element event
   */

  _keyActions(evt) {
    if (evt.key === ' '){
      evt.preventDefault();

      const control = evt.target;

      if (control.classList.contains('icon-chevron-down')){
        this._decreaseValue();
      } else if (control.classList.contains('icon-chevron-up')){
        this._increaseValue();
      }
    }
  }

  /**
   * Enable input and controls
   * @private
   */
  enable(){
    const input =  this.dom.input;

    input.disabled = false;

    Array.from(this.dom.controls).forEach((control) => {
      control.classList.remove('disabled');
      control.tabIndex = 0;
    });
  }

  /**
   * Disable input and controls
   * @private
   */
  disable(){
    const input =  this.dom.input;

    input.disabled = true;

    Array.from(this.dom.controls).forEach((control) => {
      control.classList.add('disabled');
      control.tabIndex = -1;
    });
  }
}

var style = ":host {\n  display: inline-block;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n:host([numberinput]) .controls {\n  display: none;\n}\n\n:host([disabled]) {\n  pointer-events: none;\n}\n\n:host([disabled]) input,\n:host([disabled]) .icon {\n  opacity: 0.4;\n}\n\n.spinner {\n  user-select: none;\n  width: 100%;\n  display: flex;\n  align-items: center;\n}\n\ninput {\n  flex: auto;\n  width: 64px;\n  line-height: 1.5;\n  padding: 5px 7px 4px;\n  border: 1px solid var(--spinner-input-border, #878787);\n  color: var(--spinner-text, #242424);\n  font-size: 14px;\n  font-family: var(--font-main, 'Ericsson Hilda', 'Helvetica');\n  font-weight: 400;\n  background: var(--spinner-input-background, #fff);\n  outline: 0;\n  -moz-appearance: textfield;\n}\n\ninput[type='number']::placeholder {\n  color: var(--spinner-placeholder, #6a6a6a);\n}\n\ninput[type='number']:focus:not(:disabled):not([disabled]):not(:read-only):not([readonly]) {\n  outline: 0;\n  border-color: var(--purple, #a56ebe);\n}\n\ninput[type='number']::-webkit-inner-spin-button,\ninput[type='number']::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n.controls {\n  margin-left: 8px;\n  display: inline-flex;\n  align-items: center;\n}\n\n.icon {\n  display: grid;\n  place-content: center;\n  width: 32px;\n  height: 32px;\n  border: solid 1px var(--spinner-control-border, #878787);\n  border-radius: var(--spinner-radius, 3px);\n  background: var(--spinner-control-background, transparent);\n}\n\n.icon + .icon {\n  margin-left: var(--space-small, 4px);\n}\n\n.icon:active,\n.icon:focus {\n  outline: 1px solid var(--purple, #a56ebe);\n  outline-offset: 1px;\n}\n\n@supports (-ms-ime-align: auto) {\n  .icon {\n    padding-top: 7px;\n  }\n}\n\n.icon:hover {\n  text-decoration: none;\n  background: var(--spinner-control-background-hover, #4e4e4e);\n  border: 1px solid var(--spinner-control-border-hover, #4e4e4e);\n  cursor: pointer;\n  --icon-color: var(--spinner-control-hover, #f2f2f2);\n}\n\n.icon.disabled {\n  opacity: 0.4;\n  pointer-events: none;\n  cursor: default;\n}\n";

/* eslint-disable lit-a11y/tabindex-no-positive */

class CustomSpinner extends Spinner$1 {
  constructor(element) {
    super(element);
    this.dom.controls = element.querySelectorAll('.controls > eui-icon');
  }

  /**
   * Wrapper around EDSpinner#_increaseValue, to raise extra change event
   */
  _increaseValue() {
    super._increaseValue();
    this.dom.input.dispatchEvent(new Event('change'));
  }

  /**
   * Wrapper around EDSpinner#_decreaseValue, to raise extra change event
   */
  _decreaseValue() {
    super._decreaseValue();
    this.dom.input.dispatchEvent(new Event('change'));
  }

  /**
   * There is a bug inside EDS spinner for regarding parseInt overflow in this function
   * Bug has been raised to EDS, can be deleted when it's fixed from.
   */
  _setCorrectState() {
    const input = this.dom.spinner.querySelector('input');

    this.dom.controls[0].classList.remove('disabled');
    this.dom.controls[1].classList.remove('disabled');

    if (parseFloat(input.value) === parseFloat(this.dom.max)) {
      this.dom.controls[1].classList.add('disabled');
    }

    if (parseFloat(input.value) === parseFloat(this.dom.min)) {
      this.dom.controls[0].classList.add('disabled');
    }
  }
}

/**
 * @property {Number} max - number to set as a max value of input
 * @property {Number} min - number to set as a min value of input
 * @property {Number} step - number to set the step of input changing
 * @property {Number} value - number to set as a initial value of input
 * @property {Boolean} numberInput - true/false to enable/disable number input component behavior
 * @property {Boolean} disabled - true/false to disable/enable spinner
 */
class Spinner extends LitComponent {
  static get components() {
    return {
      'eui-icon': Icon,
    };
  }

  /**
   * Connect to the .spinner element and set it as the EDS CustomSpinner.
   */
  didUpgrade() {
    if (!this.spinner) {
      const spinnerContainer = this.shadowRoot.querySelector('.spinner');
      this.spinner = new CustomSpinner(spinnerContainer);
      this.spinner.init();
    }
  }

  /**
   * Sets value in between max and min value
   * @param {number} newValue Value you want to parse
   * @param {number} min Min value
   * @param {number} max Max value
   */
  _sanitizeValue(newValue, min, max) {
    const parsedNewValue = parseInt(newValue, 10);
    if (Number.isNaN(parsedNewValue)) {
      return this._sanitizeValue(0, min, max);
    }

    if (min !== null && parsedNewValue < min) {
      return min;
    }

    if (max !== null && parsedNewValue > max) {
      return max;
    }

    return parsedNewValue;
  }

  /**
   * Event handler for events from input control
   * Bubbles component standard customized change event
   */
  handleEvent(event) {
    if (event.type === 'change') {
      event.stopPropagation();
      const sanitizedValue = this._sanitizeValue(
        event.target.value,
        this.min,
        this.max,
      );
      if (this.value !== sanitizedValue) {
        this.value = sanitizedValue;
        this.bubble('change', { value: this.value });
      }
    }
  }

  /**
   * Lifecycle hook triggers when prop was changed
   *
   * @method didChangeProps
   *
   */
  didChangeProps(changedProps) {
    const valueChanged = changedProps.has('value');
    const minChanged = changedProps.has('min');
    const maxChanged = changedProps.has('max');

    if (valueChanged || minChanged || maxChanged) {
      this.value = this._sanitizeValue(this.value, this.min, this.max);
      this.spinner.dom.input.value = this.value;

      if (minChanged) {
        if (this.min === null) {
          this.spinner.dom.min = Number.NEGATIVE_INFINITY;
        } else {
          this.spinner.dom.min = this.min;
        }
      }

      if (maxChanged) {
        if (this.max === null) {
          this.spinner.dom.max = Number.POSITIVE_INFINITY;
        } else {
          this.spinner.dom.max = this.max;
        }
      }

      this.spinner._setCorrectState();
    }

    if (changedProps.has('step')) {
      this.spinner.dom.step = this.step;
    }
  }

  /**
   * Render the basic structure hook for EDS spinner component
   */
  render() {
    return html`
      <div class="spinner">
        <input
          type="number"
          value="${this.value}"
          max=${ifDefined(this.max)}
          min=${ifDefined(this.min)}
          step="${this.step}"
          @change=${this}
          ?disabled=${this.disabled}
        />
        <div class="controls">
          <eui-icon
            class="icon"
            name="chevron-down"
            tabindex=${this.disabled ? -1 : 0}
          ></eui-icon>
          <eui-icon
            class="icon"
            name="chevron-up"
            tabindex=${this.disabled ? -1 : 0}
          ></eui-icon>
        </div>
      </div>
    `;
  }
}

definition('eui-spinner', {
  style,
  props: {
    max: { attribute: true, type: Number },
    min: { attribute: true, type: Number },
    step: { attribute: true, type: Number, default: 1 },
    value: { attribute: true, type: Number, default: 0 },
    numberinput: { attribute: true, type: Boolean, default: false },
    disabled: { attribute: true, type: Boolean, default: false },
  },
})(Spinner);

export { Spinner };
