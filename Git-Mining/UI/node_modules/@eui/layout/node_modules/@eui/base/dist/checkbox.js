import { definition, LitComponent, html, nothing } from '@eui/lit-component';

var style = ":host {\n  display: flex;\n  font-family: var(--font-main, 'Ericsson Hilda', 'Helvetica');\n  vertical-align: sub;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  cursor: pointer;\n}\n\n.checkbox__input {\n  display: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n.checkbox__input:hover,\n.checkbox__label:hover {\n  cursor: pointer;\n}\n\n.checkbox__square {\n  border-radius: var(--checkbox-border-radius);\n  width: 14px;\n  height: 14px;\n  align-self: center;\n  display: inline-flex;\n  justify-content: center;\n  background-color: var(--checkbox-background, #fff);\n  border: solid 1px var(--checkbox-border, #878787);\n  margin-right: var(--space-small, 4px);\n}\n\n.checkbox__square__tick {\n  fill: var(--checkbox-tick, #f2f2f2);\n}\n\nsvg {\n  align-self: center;\n}\n\n.checkbox__label {\n  display: flex;\n}\n\n.checkbox__square__indeterminate {\n  width: 8px;\n  height: 2.5px;\n  background-color: var(--checkbox-tick, #f2f2f2);\n  align-self: center;\n}\n\n.checkbox__label__content {\n  display: inline;\n  vertical-align: text-top;\n}\n\n:host(:not([disabled]):hover) .checkbox__square {\n  border: solid 1px var(--checkbox-hover-border, #6a6a6a);\n}\n\n:host([disabled]) {\n  cursor: default;\n  opacity: 0.4;\n  pointer-events: none;\n}\n\n:host([indeterminate]) .checkbox__square,\n:host([checked]) .checkbox__square {\n  border: solid 1px var(--checkbox-checked-border, #1174e6);\n  background-color: var(--checkbox-checked-background, #1174e6);\n}\n\n:host([indeterminate]:hover) .checkbox__square,\n:host([checked]:hover) .checkbox__square {\n  border: solid 1px var(--checkbox-checked-hover-border, #0069c2);\n  background-color: var(--checkbox-checked-hover-background, #0069c2);\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n:host(:focus) .checkbox__square {\n  outline: 1px solid var(--purple, #a56ebe);\n  outline-offset: 1px;\n}\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

/**
 * @property {Boolean} checked - the checked state of the checkbox
 * @property {Boolean} disabled - the disabled state of the checkbox
 * @property {Boolean} indeterminate - the indeterminate state of the checkbox
 * @property {String} name - the name of the checkbox
 * @property {Boolean} menuItem - used to inform the checkbox that it is
 */

class Checkbox extends LitComponent {
  constructor() {
    super();
    this.addEventListener('click', this);
  }

  /**
   * Emits the change event if the checkbox state is changed
   *
   * @function _emitChangeEvent
   * @param {Map} changedProps - previous values of the changed props
   * @private
   */
  _emitChangeEvent(changedProps) {
    if (changedProps.get('checked') !== null && changedProps.has('checked')) {
      this.bubble('change', {
        name: this.name,
        value: this.value,
        checked: this.checked,
        label: this.value,
      });
    }
  }

  /**
   * Toggles the checked and indeterminate state
   *
   * @function _toggleCheckedIndeterminate
   * @param {Map} changedProps - previous values of the changed props
   * @private
   */
  _toggleCheckedIndeterminate(changedProps) {
    if (changedProps.has('indeterminate') && this.checked) {
      this.checked = !this.indeterminate;
    } else if (changedProps.has('checked') && this.indeterminate) {
      this.indeterminate = !this.checked;
    }
  }

  /**
   * Hook into the lifecycle callback to trigger the toggle event when the
   * on prop is changed.
   *
   * @function didChangeProps
   * @param {Map} changedProps - previous values of the changed props
   */
  didChangeProps(changedProps) {
    this._toggleCheckedIndeterminate(changedProps);
    this._emitChangeEvent(changedProps);
  }

  /**
   * handle the check/uncheck of the checkbox
   *
   * @function handleEvent
   * @private
   */
  handleEvent(event) {
    if (event.type === 'click') {
      if (!this.disabled) {
        this.checked = !this.checked;
      }
    }
  }

  /**
   * Get the value of the checkbox.
   */
  get value() {
    return this.textContent.trim();
  }

  /**
   * Set the value of the checkbox.
   */
  set value(value) {
    this.textContent = value.trim();
  }

  /**
   * Render the checkbox component. This function is called each time a
   * prop changes.
   */
  render() {
    return html` <input
        class="checkbox__input"
        type="checkbox"
        name="${this.name}"
        value="${this.value}"
        ?checked=${this.checked}
        .indeterminate="${this.indeterminate}"
        ?disabled="${this.disabled}"
      />
      <label class="checkbox__label">
        <span class="checkbox__square">
          ${this.checked
            ? html`<svg
                width="10px"
                height="10px"
                viewBox="0 0 57 47"
                version="1.1"
                xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
              >
                <g
                  class="checkbox__square__tick"
                  fill="#000000"
                  fill-rule="nonzero"
                >
                  <polygon
                    id="Path"
                    transform="translate(28.500000, 23.500000) scale(-1, 1) rotate(-180.000000) translate(-28.500000, -23.500000) "
                    points="57 38.5581264 47.9093521 47 21.8321097 18.0709206 8.49026488 31.3333735 9.75661883e-14 22.897405 22.4385572 -7.19429941e-14"
                  ></polygon>
                </g>
              </svg>`
            : nothing}
          ${this.indeterminate
            ? html`<span class="checkbox__square__indeterminate"></span>`
            : nothing}
        </span>
        <slot class="checkbox__label__content"></slot>
      </label>`;
  }
}

definition('eui-checkbox', {
  style,
  props: {
    checked: { attribute: true, type: Boolean },
    disabled: { attribute: true, type: Boolean },
    indeterminate: { attribute: true, type: Boolean },
    name: { attribute: true, type: String, required: true },
    menuItem: { attribute: true, type: Boolean },
  },
})(Checkbox);

export { Checkbox };
