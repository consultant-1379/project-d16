import { definition, TemplateComponent } from '@eui/component';
import { Icon } from '@eui/theme/icon';

var template = "<div class=\"eui__card\">\n  <div class=\"eui__card__header\">\n    <div class=\"eui__card__header__left\">\n      <div id=\"main-panel-title\" class=\"eui__card__title\"></div>\n    </div>\n    <div class=\"eui__card__header__right\">\n      <slot name=\"action\"></slot>\n    </div>\n  </div>\n  <div class=\"eui__card__subtitle\"></div>\n  <div class=\"eui__card__content eui__card__content--empty\">\n    <slot name=\"content\"></slot>\n  </div>\n  <div class=\"eui__card__footer\">\n    <slot name=\"footer\"></slot>\n  </div>\n</div>\n";

var style = ":host {\n  display: flex;\n  overflow-x: hidden;\n  flex-grow: 0;\n  justify-content: flex-start;\n  background-color: var(--card-color-background, #fff);\n  cursor: pointer;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  margin: var(--space-base, 8px);\n}\n\n:host(:hover:not([selected])) .eui__card {\n  border: 1px solid var(--card-color-border-hover, #6A6A6A);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host(:not([subtitle])) .eui__card__subtitle {\n  display: none;\n}\n\n:host([selected]) .eui__card {\n  border: 1px solid var(--blue, #1174E6);\n}\n\n:host(.sortable-chosen) {\n  z-index: 9999 !important;\n  background-color: var(--card-color-background, #fff);\n  opacity: 1;\n}\n\n:host(.sortable-ghost) {\n  background-color: var(--card-color-background, #fff);\n  opacity: 1 !important;\n  -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';\n}\n\n.eui__card {\n  width: 100%;\n  padding: var(--space-large, 16px);\n  height: auto;\n  flex-direction: column;\n  display: flex;\n  border: 1px solid var(--card-color-border, #878787);\n}\n\n.eui__card__header {\n  flex: 0 0 auto;\n  margin-top: 0;\n  display: flex;\n}\n\n.eui__card__header__left {\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  flex: 1;\n  text-align: left;\n}\n\n.eui__card__header__right {\n  flex: none;\n  text-align: right;\n  display: flex;\n  align-items: center;\n}\n\n.eui__card__header__right ::slotted(*) {\n  font-size: var(--space-large, 16px);\n  font-weight: bold;\n  margin: 0 0 0 var(--space-base, 8px);\n  opacity: 0.7;\n}\n\n.eui__card__header__right ::slotted(*:hover) { \n  opacity: 1;\n}\n\n.eui__card__drag__icon {\n  margin: var(--space-base, 8px);\n}\n\n.eui__card__title {\n  color: var(--text, #242424);\n  font-size: var(--space-large, 16px);\n  display: flex;\n  align-items: center;\n  margin-right: var(--space-base, 8px);\n  word-break: break-word;\n  font-weight: var(--weight-medium, 500);\n  height: var(--space-xl, 24px);\n}\n\n.eui__card__subtitle {\n  margin-top: var(--space-small, 4px);\n  font-size: var(--btn-font-size, 14px);\n  color: var(--gray-text, #6a6a6a);\n  display: inline-block;\n  word-break: break-word;\n}\n\n.eui__card__content {\n  color: var(--text, #242424);\n  padding-top: var(--space-large, 16px);\n  flex: 1;\n  display: flex;\n  flex-flow: column;\n}\n\n.eui__card__content--empty {\n  display: none;\n}\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

class Card extends TemplateComponent {
  static get components() {
    return {
      'eui-icon': Icon,
    };
  }

  constructor() {
    super();
    this.titleElement = this.root.querySelector('.eui__card__title');
    this.subtitleElement = this.root.querySelector('.eui__card__subtitle');
    this.contentElement = this.root.querySelector('.eui__card__content');
    this.headerLeft = this.root.querySelector('.eui__card__header__left');
    this.addEventListener('click', () => {
      this.selected = !this.selected;
    });
  }

  didRender() {
    this.compatElementUpdated();
  }

  /**
   * Observe elements being added and removed from the content slot.
   * When there is no content added, hide the content.
   *
   * @function _observeContentSlot
   * @private
   */
  _observeContentSlot = () => {
    const config = { childList: true, subtree: true };

    const hideContent = () => {
      if (this.querySelector('[slot="content"]')) {
        this._showContentArea();
      } else {
        this._hideContentArea();
      }
    };

    if (!this.observer) {
      // Create an observer instance to observe elements added and deleted from the content slot.
      this.observer = new window.MutationObserver(() => {
        hideContent();
      });
    }

    hideContent();

    // Start observing the Card mutations
    this.observer.observe(this, config);
  };

  /**
   * Add or remove draggable icon according the attribute
   *
   * @function _addDraggableIcon
   * @private
   */
  _updateDraggableIcon() {
    if (this.drag) {
      this._addDraggableIcon();
    } else {
      this._removeDraggableIcon();
    }
  }

  /**
   * Add draggable icon.
   *
   * @function _addDraggableIcon
   * @private
   */
  _addDraggableIcon() {
    const oldIcon = this.headerLeft.querySelector('.eui__card__drag__icon');

    if (oldIcon) {
      return;
    }

    const icon = this.createElement('eui-icon');
    icon.setAttribute('name', 'drag-handle');
    icon.classList.add('eui__card__drag__icon');
    this.headerLeft.insertBefore(icon, this.headerLeft.childNodes[0]);
  }

  /**
   * Remove draggable icon.
   *
   * @function _removeDraggableIcon
   * @private
   */
  _removeDraggableIcon() {
    const icon = this.headerLeft.querySelector('.eui__card__drag__icon');
    if (icon) {
      icon.parentNode.removeChild(icon);
    }
  }

  /**
   * Hide the content area of the card.
   *
   * @function _hideContentArea
   * @private
   */
  _hideContentArea = () => {
    this.contentElement.classList.add('eui__card__content--empty');
  };

  /**
   * Show the content are of the card.
   *
   * @function _showContentArea
   * @private
   */
  _showContentArea = () => {
    this.contentElement.classList.remove('eui__card__content--empty');
  };

  /**
   * Start observing the content slot
   *
   * @function didConnect
   */
  didConnect() {
    super.didConnect();
    this._observeContentSlot();
    this._updateDraggableIcon();
  }

  /**
   * Stop observing the content slot
   *
   * @function didDisconnect
   */
  didDisconnect() {
    if (this.observer) {
      this.observer.disconnect();
    }
    super.didDisconnect();
  }

  /**
   * Initially setup the card layout.
   */
  didUpgrade() {
    if (this.cardTitle) {
      this.titleElement.innerText = this.cardTitle;
    }

    if (this.subtitle) {
      this.subtitleElement.innerText = this.subtitle;
    }
  }

  /**
   * Called when props have changed.
   * @param {Map} changedProps - Keys are the names of changed properties;
   * Values are the corresponding previous values.
   */
  didChangeProps(changedProps) {
    if (changedProps.has('cardTitle')) {
      this.titleElement.innerText = this.cardTitle;
    }

    if (changedProps.has('subtitle')) {
      this.subtitleElement.innerText = this.subtitle;
    }

    if (changedProps.has('drag')) {
      this._updateDraggableIcon();
    }
  }
}

/**
 * @property {String} cardTitle - the title of the card
 * @property {Boolean} selected - the selected state of the card
 * @property {String} subtitle - the subtitle of the card
 * @property {Boolean} drag - indicate if card is draggable
 */
definition('eui-card', {
  style,
  template,
  props: {
    cardTitle: { attribute: true, type: String },
    selected: { attribute: true, type: Boolean },
    subtitle: { attribute: true, type: String },
    drag: { attribute: true, type: Boolean },
  },
})(Card);

export { Card };
