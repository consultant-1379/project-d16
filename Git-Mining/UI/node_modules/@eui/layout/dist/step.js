import { definition, TemplateComponent } from '@eui/component';

var style = ":host {\n  display: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n}\n\n:host([selected]) {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.content {\n  height: 100%;\n  overflow-y: auto;\n}\n\n*::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n  background: transparent;\n}\n*::-webkit-scrollbar-corner {\n  background: transparent;\n}\n*::-webkit-scrollbar-thumb {\n  background-color: var(--scrollbar-thumb, rgb(177, 177, 177));\n}\n* {\n  /* Firefox */\n  scrollbar-color: var(--scrollbar-thumb, rgb(177, 177, 177)) transparent;\n  scrollbar-width: thin;\n}\n";

var template = "<div class=\"content\">\n  <slot></slot>\n</div>\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

class Step extends TemplateComponent {
  /**
   * Special call for shadyDOM.
   */
  didRender() {
    this.compatElementUpdated();
  }

  /**
   * called when the component is connected
   */
  didConnect() {
    this.bubble('eui-wizard-step:update');
    this.wizard = this.parentNode;
  }

  /**
   * Called each time a prop changes on the component
   *
   * @param Map} changedProps - Keys are the names of changed properties;
   * Values are the corresponding previous values.
   */
  didChangeProps(changedProps) {
    if (changedProps.has('valid')) {
      this.bubble('eui-wizard-step:valid');
    }

    if (changedProps.has('selected')) {
      // Set scrollbar position to 0 on each step
      this.shadowRoot.querySelector('.content').scrollTop = 0;
    }
  }

  /**
   * Called when the component is disconnected/removed from the DOM
   */
  didDisconnect() {
    if (typeof this.wizard.bubble === 'function') {
      this.wizard.bubble('eui-wizard-step:update');
    }
  }
}

/**
 * @property {Boolean} completed - True if user pressed "next" button in this step
 * @property {Boolean} selected - Is this step shown now
 * @property {String} stepTitle - The title of the step
 * @property {Boolean} valid - Is this step valid
 */
definition('eui-wizard-step', {
  style,
  template,
  props: {
    completed: { attribute: true, type: Boolean },
    selected: { attribute: true, type: Boolean },
    stepTitle: { attribute: true, type: String },
    valid: { attribute: true, type: Boolean },
  },
})(Step);

export { Step };
