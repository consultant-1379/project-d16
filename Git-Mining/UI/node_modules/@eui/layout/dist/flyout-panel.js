import { definition, TemplateComponent } from '@eui/component';
import { Icon } from '@eui/theme/icon';

var template = "<div class=\"flyout-panel__outer\"></div>\n<div class=\"flyout-panel right\">\n  <div class=\"panel\">\n    <!-- Header -->\n    <div class=\"panel__header\">\n      <div class=\"panel__header__left\">\n        <div class=\"panel__header__left__title\"></div>\n      </div>\n      <div class=\"panel__header__right\">\n        <eui-icon name=\"cross\" class=\"close-panel\"></eui-icon>\n      </div>\n    </div>\n    <!-- Content -->\n    <div class=\"panel__content\">\n      <slot name=\"content\"></slot>\n    </div>\n    <!-- Footer -->\n    <div class=\"panel__footer\">\n      <slot name=\"footer\"></slot>\n    </div>\n  </div>\n</div>\n";

var style = ":host {\n  display: block;\n  position: absolute;\n  visibility: hidden;\n  pointer-events: none;\n  color: var(--text, #242424);\n}\n\n:host([show]) {\n  visibility: visible;\n  pointer-events: all;\n  transition: visibility 0.18s linear;\n}\n\n:host(:not([show])) {\n  transition: visibility 0.18s linear 0.4s;\n}\n\n:host .flyout-panel__outer {\n  position: fixed;\n  z-index: 1000;\n  top: 0;\n  left: 0;\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  background-color: transparent;\n  opacity: 0;\n}\n\n:host([show]) .flyout-panel__outer {\n  opacity: 1;\n  background-color: var(--dialog-overlay, rgba(0, 0, 0, 0.3));\n  transition: opacity 0.18s ease-in-out 0s, background-color 0.18s ease-in-out 0s;\n}\n\n:host(:not([show])) .flyout-panel__outer {\n  background-color: transparent;\n  transition: opacity 0.18s ease-in-out 0.18s, background-color 0.18s ease-in-out 0.18s;\n}\n\n.flyout-panel {\n  top: var(--appbar-height, 48px);\n  padding: var(--space-large, 16px);\n  background-color: var(--dialog-background, #fafafa);\n  box-sizing: border-box;\n  width: var(--width, 400px);\n  height: calc(100vh - var(--appbar-height, 48px));\n  position: fixed;\n  z-index: 1000;\n}\n\n.click-to-close {\n  cursor: pointer;\n}\n\n/* POSITION - right */\n.right {\n  right: calc(0px - var(--width, 400px));\n  transition: right 0.1s linear;\n}\n\n/* SHOW - right */\n.right.show {\n  right: 0;\n}\n\n/* POSITION - left */\n.left {\n  left: calc(0px - var(--width, 400px));\n  transition: left 0.1s linear;\n}\n\n/* SHOW - left */\n.left.show {\n  left: 0;\n}\n\n.panel {\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  height: 100%;\n}\n\n.panel__header {\n  box-sizing: border-box;\n}\n\n.panel__content {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 90px) !important;\n  box-sizing: border-box;\n}\n\n.panel__footer {\n  text-align: right;\n  box-sizing: border-box;\n}\n.panel__footer[hidden] {\n  display: none;\n}\n\n:host(.hide-content) .panel__content {\n  display: none;\n}\n\n.icon {\n  font-style: normal;\n  cursor: pointer;\n}\n\n.icon::before {\n  content: '\\E961';\n  padding-left: var(--space-base, 8px);\n  font-family: 'Ericsson Icons' !important;\n  vertical-align: middle;\n}\n\n.close-panel {\n  margin: 0 0 0 var(--space-base, 8px);\n  cursor: pointer;\n}\n\n.panel__header {\n  flex: 0 0 auto;\n  margin-top: 0;\n  display: flex;\n  padding-bottom: var(--space-xl, 24px);\n}\n\n.panel__header__left {\n  flex: 1;\n  text-align: left;\n}\n\n.panel__header__right {\n  flex: none;\n  text-align: right;\n  font-size: 16px;\n}\n\n.panel__header__right ::slotted(*) {\n  margin: 0 0 0 var(--space-base, 8px);\n  height: 16px;\n  cursor: pointer;\n}\n\n.panel__header__left__title {\n  font-size: 16px;\n  display: inline-block;\n  margin-right: var(--space-base, 8px);\n}\n\n.panel__content {\n  display: block;\n  box-sizing: border-box;\n  height: 100%;\n  overflow: auto;\n}\n\n.panel__content slot {\n  height: 100%;\n}\n\n.panel__footer {\n  margin-top: var(--space-base, 8px);\n}\n\n.panel__footer ::slotted(*) {\n  margin: 0 var(--space-base, 8px) 0 0;\n}\n\n*::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n  background: transparent;\n}\n*::-webkit-scrollbar-corner {\n  background: transparent;\n}\n*::-webkit-scrollbar-thumb {\n  background-color: var(--scrollbar-thumb, rgb(177, 177, 177));\n}\n* { /* Firefox */\n  scrollbar-color: var(--scrollbar-thumb, rgb(177, 177, 177)) transparent;\n  scrollbar-width: thin;\n}\n";

/**
 * @license
 * COPYRIGHT Ericsson 2022
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 */

class FlyoutPanel extends TemplateComponent {
  static get components() {
    return {
      'eui-icon': Icon,
    };
  }

  constructor() {
    super();
    // function bindings
    this._addEventListeners = this._addEventListeners.bind(this);
    this._addWindowEventListeners = this._addWindowEventListeners.bind(this);
    this._removeEventListeners = this._removeEventListeners.bind(this);
    this._removeWindowEventListeners =
      this._removeWindowEventListeners.bind(this);
    this._onFooterSlotChange = this._onFooterSlotChange.bind(this);
    this._handleResize = this._handleResize.bind(this);
    this._handleWindowResize = this._handleWindowResize.bind(this);

    // elements
    this.flyoutPanel = this.shadowRoot.querySelector('.flyout-panel');
    this.flyoutPanelTitle = this.shadowRoot.querySelector(
      '.panel__header__left__title',
    );
    this.closeButton = this.shadowRoot.querySelector('.close-panel');
    this.flyoutPanelFooter = this.shadowRoot.querySelector('.panel__footer');

    this.flyoutPanel.addEventListener('transitionend', () => {
      if (this.show) {
        this.bubble('eui-flyout-panel:open');
      } else if (!this.show) {
        this.bubble('eui-flyout-panel:closed');
      }
    });

    // slots
    this.flyoutPanelFooterSlot = this.shadowRoot.querySelector(
      'slot[name="footer"]',
    );
  }

  get footer() {
    return this.shadowRoot.querySelector('.panel__footer');
  }

  get overlay() {
    return this.shadowRoot.querySelector('.flyout-panel__outer');
  }

  /**
   * Add / remove close action from the overlay. This allows the user
   * to close the flyout by clicking outside the panel.
   * Add / remove listener for ESC key to close the panel.
   *
   * @function _addCloseAction
   * @param {Boolean} state - click action on/off
   * @private
   */
  _addCloseAction = state => {
    if (state) {
      if (this.show) {
        window.addEventListener('keydown', this);
      }
      this.overlay.addEventListener('click', this);
      this.overlay.classList.add('click-to-close');
    } else {
      window.removeEventListener('keydown', this);
      this.overlay.removeEventListener('click', this);
      this.overlay.classList.remove('click-to-close');
    }
    this.closeButton.hidden = !state;
  };

  /**
   * Add the necessary event listeners by attaching them to the relevant DOM elements.
   *
   * @function _addEventListeners
   * @private
   */
  _addEventListeners() {
    this._onFooterSlotChange();
    this.flyoutPanelFooterSlot.addEventListener(
      'slotchange',
      this._onFooterSlotChange,
      {
        passive: true,
      },
    );
    this.closeButton.addEventListener(
      'click',
      () => {
        this.show = false;
      },
      { passive: true },
    );

    this._addCloseAction(true);
  }

  /**
   * Remove the necessary event listeners.
   *
   * @function _removeEventListeners
   * @private
   */
  _removeEventListeners() {
    this.flyoutPanelFooterSlot.removeEventListener(
      'slotchange',
      this._onFooterSlotChange,
      {
        passive: true,
      },
    );
    this.closeButton.removeEventListener(
      'click',
      () => {
        this.show = false;
      },
      { passive: true },
    );
    this._removeWindowEventListeners();
  }

  /**
   * Add the resize event listener to the window object.
   * Also resizing the FlyoutPanel before it gets displayed
   *
   * @function _addWindowEventListeners
   * @private
   */
  _addWindowEventListeners() {
    this._handleResize();
    window.addEventListener('resize', this, {
      passive: true,
      useCapture: true,
    });
    if (this.closeButton.hidden === false) {
      window.addEventListener('keydown', this);
    }
  }

  /**
   * Remove the resize event listener from the window object.
   *
   * @function _removeWindowEventListeners
   * @private
   */
  _removeWindowEventListeners() {
    window.removeEventListener('resize', this, {
      passive: true,
      useCapture: true,
    });
    window.removeEventListener('keydown', this);
  }

  /**
   * Determines if the close icon should be visible or not.
   *
   * @function _onFooterSlotChange
   * @private
   */
  _onFooterSlotChange() {
    if (!this.querySelector('[slot="footer"]') && this.flyoutPanelFooter) {
      this.footer.hidden = true;
      if (!this.panelClose) {
        this._addCloseAction(true);
      }
    } else {
      this.footer.hidden = false;
      if (!this.panelClose) {
        this._addCloseAction(false);
      }
    }
  }

  /**
   * This method handles all the resize events and throttles them
   * by handling the resize every 200ms.
   *
   * @method _handleWindowResize
   * @private
   */
  _handleWindowResize() {
    let lastCallTime = 0;
    const delay = 200;
    const throttleHandler = () => {
      const currentCallTime = new Date().getTime();
      if (currentCallTime - lastCallTime < delay) {
        return;
      }
      lastCallTime = currentCallTime;
      this._handleResize();
    };
    throttleHandler();
  }

  /**
   * Resizes the flyout panel depending on the width prop and viewport width
   *
   * @method _handleResize
   * @private
   */
  _handleResize() {
    const { clientWidth } = document.documentElement;
    if (clientWidth > this.width) {
      this.flyoutPanel.style.setProperty('--width', `${this.width}px`);
    } else {
      this.flyoutPanel.style.setProperty('--width', `${clientWidth}px`);
    }
  }

  handleEvent(event) {
    if (event.type === 'resize') {
      this._handleWindowResize();
    }
    if (event.type === 'click') {
      this.show = false;
    }
    if (event.type === 'keydown' && event.key === 'Escape') {
      this.show = false;
    }
  }

  /**
   * Called once when the flyout-panel component connects to the DOM.
   * The panel is hidden by default, and event listeners added.
   *
   * @function didConnect
   */
  didConnect() {
    this._addEventListeners();
  }

  /**
   * @method didUpgrade
   */
  didUpgrade() {
    this.flyoutPanelTitle.innerText = this.panelTitle;
    this._setFlyoutWidth();
    this._guardFlyoutPosition();
    if (this.position === 'left') {
      this.flyoutPanel.classList.remove('right');
      this.flyoutPanel.classList.add('left');
    }
  }

  /**
   * Called each time a prop changes on the component
   *
   * @method didChangeProps
   * @param {Map} changedProps - Keys are the names of changed properties;
   * Values are the corresponding previous values.
   */
  didChangeProps(changedProps) {
    if (changedProps.has('panelTitle')) {
      this.flyoutPanelTitle.innerText = this.panelTitle;
    }

    if (changedProps.has('width')) {
      this._setFlyoutWidth();
    }

    if (changedProps.has('panelClose')) {
      if (this.panelClose) {
        this._addCloseAction(true);
      } else {
        const isFooterButtons =
          this.querySelectorAll('[slot="footer"]').length > 0;
        this._addCloseAction(!isFooterButtons);
      }
    }

    if (changedProps.has('position')) {
      this._guardFlyoutPosition();
      if (this.position === 'left') {
        this.flyoutPanel.classList.remove('right');
        this.flyoutPanel.classList.add('left');
      } else if (this.position === 'right') {
        this.flyoutPanel.classList.remove('left');
        this.flyoutPanel.classList.add('right');
      }
    }

    if (changedProps.has('show')) {
      if (this.show) {
        this._addWindowEventListeners();
        setTimeout(() => {
          // show the flyout panel after 100ms.
          // This is when both the position and the show props
          // are set at the same time, which messes up the animation.
          // Adding the timout allows the postion to be set BEFORE
          // the panel is animated.
          this.flyoutPanel.classList.add('show');
        }, 100);
      } else {
        this._removeWindowEventListeners();
        this.flyoutPanel.classList.remove('show');
      }
    }
  }

  /**
   * Set the flyout width. There is a safeguard in place
   * to prevent the width of the flyout to be less than 320px.
   *
   * @function _setFlyoutWidth
   * @private
   */
  _setFlyoutWidth = () => {
    if (this.width < 320) {
      this.width = 320;
    }
    this.flyoutPanel.style.setProperty('--width', `${this.width}px`);
  };

  /**
   * Add a safeguard, 'left'/'right' are the only valid choices.
   *
   * @function _guardFlyoutPosition
   * @private
   */
  _guardFlyoutPosition = () => {
    if (this.position !== 'left' && this.position !== 'right') {
      this.position = 'right';
      this.flyoutPanel.classList.add('right');
    }
  };

  /**
   * Called once when the flyout-panel component disconnects from the DOM.
   * All event listeners are removed
   *
   * @function didDisconnect
   */
  didDisconnect() {
    this._removeEventListeners();
  }
}

/**
 * @property {Boolean} panelClose - always show the close panel button on the top right.
 * @property {String} panelTitle - title of the flyout panel.
 * @property {Number} width - width of the flyout panel.
 * @property {String} position - which side of the viewport the panel should be positioned.
 * @property {String} show - prop that indicates visibility of the flyout panel
 */
definition('eui-flyout-panel', {
  style,
  template,
  props: {
    panelClose: { attribute: true, type: Boolean },
    panelTitle: { attribute: true, type: String },
    width: { attribute: true, type: Number, default: 400 },
    position: { attribute: true, type: String, default: 'right' },
    show: { attribute: true, type: Boolean },
  },
})(FlyoutPanel);

export { FlyoutPanel };
